{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"Punctuation/","text":"Punctuation Colons Capitalize the first word after a colon if a colon introduces a direct quotation or the first word after a colon is a proper noun. For example: Search returned one result: Salesforce . The activity returns two codes: Success or Error . Semicolons Use semicolons sparingly. They are difficult to see on some hand-held devices. Semicolons can sometimes confuse non-native English speakers. For example, in Greek you end a question with a semicolon. In Arabic a semicolon denotes a direct causal relationship between different phrases. Rewrite the sentence or paragraph to make it more readable. Commas Use the serial comma (sometimes called the Oxford comma). In a list of three or more, include a comma before the conjunction. For example: Learn about variables, placeholders, and entries. Dashes When offsetting a phrase with dashes you should use the longer em dash (\u2014) with a space on either side of the dash. For example: We emphasize specific, customer-centered workflows, and \u2014 whenever possible \u2014 we preserve your current workflow. Use words rather than symbols, but in some contexts you may use an en dash to convey a range of numbers. For example: We assign 2\u20135 people to each development team. Spaces Sentences should always be separated by a single space. Never two spaces. Ampersands or plus signs Use and instead of an ampersand or plus sign, unless they're part of an official title or company name. For example, Hoefler & Co . Slashes Avoid using the slash / symbol in text except for code. Replace a slash with words or commas as appropriate.","title":"General Punctuation"},{"location":"Punctuation/#punctuation","text":"","title":"Punctuation"},{"location":"Punctuation/#colons","text":"Capitalize the first word after a colon if a colon introduces a direct quotation or the first word after a colon is a proper noun. For example: Search returned one result: Salesforce . The activity returns two codes: Success or Error .","title":"Colons"},{"location":"Punctuation/#semicolons","text":"Use semicolons sparingly. They are difficult to see on some hand-held devices. Semicolons can sometimes confuse non-native English speakers. For example, in Greek you end a question with a semicolon. In Arabic a semicolon denotes a direct causal relationship between different phrases. Rewrite the sentence or paragraph to make it more readable.","title":"Semicolons"},{"location":"Punctuation/#commas","text":"Use the serial comma (sometimes called the Oxford comma). In a list of three or more, include a comma before the conjunction. For example: Learn about variables, placeholders, and entries.","title":"Commas"},{"location":"Punctuation/#dashes","text":"When offsetting a phrase with dashes you should use the longer em dash (\u2014) with a space on either side of the dash. For example: We emphasize specific, customer-centered workflows, and \u2014 whenever possible \u2014 we preserve your current workflow. Use words rather than symbols, but in some contexts you may use an en dash to convey a range of numbers. For example: We assign 2\u20135 people to each development team.","title":"Dashes"},{"location":"Punctuation/#spaces","text":"Sentences should always be separated by a single space. Never two spaces. Ampersands or plus signs Use and instead of an ampersand or plus sign, unless they're part of an official title or company name. For example, Hoefler & Co .","title":"Spaces"},{"location":"Punctuation/#slashes","text":"Avoid using the slash / symbol in text except for code. Replace a slash with words or commas as appropriate.","title":"Slashes"},{"location":"abbrev/","text":"Abbreviations Don't use common abbreviations, such as a.k.a., e.g., etc., and i.e., in documentation and UI text. They may not be familiar to nonnative speakers. Instead, use precise language and state what you mean. Write abbreviations for keyboard shortcuts using initial capitalization, plus ( + ) signs, no spaces, and no periods. You can abbreviate units of measurement in text.","title":"Abbreviations"},{"location":"abbrev/#abbreviations","text":"Don't use common abbreviations, such as a.k.a., e.g., etc., and i.e., in documentation and UI text. They may not be familiar to nonnative speakers. Instead, use precise language and state what you mean. Write abbreviations for keyboard shortcuts using initial capitalization, plus ( + ) signs, no spaces, and no periods. You can abbreviate units of measurement in text.","title":"Abbreviations"},{"location":"acronym/","text":"Acronyms and Initialisms Always spell out a full term at first use on every page before you refer to it as an acronym or initialism. Use your best judgment for commonly accepted abbreviations, such as REST and API. Add the acronym or initialism in parentheses after the full name. Correct: Use the Jitterbit Script Language (JSL) to create scripts. Incorrect: Use JSL to create scripts. Capitalize all letters in an acronym or initialism, including specific file name extensions and file types that are used as adjectives. Don't use periods or punctuation marks of any kind with acronyms or initialisms when they stand alone in text. Correct: Save your data as a CSV file. Use the HTTPS protocol. Load a JSON file. Incorrect: Save your data as a .csv file. Use the HTTPS: protocol. Load a .json file.","title":"Acronyms"},{"location":"acronym/#acronyms-and-initialisms","text":"Always spell out a full term at first use on every page before you refer to it as an acronym or initialism. Use your best judgment for commonly accepted abbreviations, such as REST and API. Add the acronym or initialism in parentheses after the full name. Correct: Use the Jitterbit Script Language (JSL) to create scripts. Incorrect: Use JSL to create scripts. Capitalize all letters in an acronym or initialism, including specific file name extensions and file types that are used as adjectives. Don't use periods or punctuation marks of any kind with acronyms or initialisms when they stand alone in text. Correct: Save your data as a CSV file. Use the HTTPS protocol. Load a JSON file. Incorrect: Save your data as a .csv file. Use the HTTPS: protocol. Load a .json file.","title":"Acronyms and Initialisms"},{"location":"active/","text":"Active Voice Active voice makes your writing concise, direct, and engaging. It also helps the reader identify the subject of the sentence. In the following example, the person who submits the form is essential information. Omitting that leads to a confusing and impersonal sentence. Passive: The change to the activity must be saved before exiting Active: You must save the activity before you exit. The passive almost always results in a longer sentence. Passive voice de-emphasizes who should take an action. Wordy instructions are also harder to follow. Passive: The log must be saved on your system, as it will be required for future inquiries. Active: Save the log on your system for later use. When in doubt, cut directly to the verb and give the reader clear directions. How to recognize the passive voice Use of the passive voice is common enough that many people don't notice when they use it. Here's a simple way to recognize it. If you insert by zombies after the verb and the sentence still makes sense, you're using the passive voice. The form was submitted by zombies. Cloud Studio notifies you when the operation was validated by zombies. When to use the passive voice There are always exceptions. Don't use the passive voice in a way that makes actions seem like they happen without anyone doing them. Good documentation should always make it clear who or what is doing something. You may need to use the passive voice with error messages or make something easier to understand. Rewording any of these sentences to use the active voice would complicate the sentence or pull focus away from its main point: Responses sent from the project include Success or Error . Jitterbit Support is required to respond to requests within 4 working hours. The system was put into an error state by the transformation.","title":"Active Voice"},{"location":"active/#active-voice","text":"Active voice makes your writing concise, direct, and engaging. It also helps the reader identify the subject of the sentence. In the following example, the person who submits the form is essential information. Omitting that leads to a confusing and impersonal sentence. Passive: The change to the activity must be saved before exiting Active: You must save the activity before you exit. The passive almost always results in a longer sentence. Passive voice de-emphasizes who should take an action. Wordy instructions are also harder to follow. Passive: The log must be saved on your system, as it will be required for future inquiries. Active: Save the log on your system for later use. When in doubt, cut directly to the verb and give the reader clear directions.","title":"Active Voice"},{"location":"active/#how-to-recognize-the-passive-voice","text":"Use of the passive voice is common enough that many people don't notice when they use it. Here's a simple way to recognize it. If you insert by zombies after the verb and the sentence still makes sense, you're using the passive voice. The form was submitted by zombies. Cloud Studio notifies you when the operation was validated by zombies.","title":"How to recognize the passive voice"},{"location":"active/#when-to-use-the-passive-voice","text":"There are always exceptions. Don't use the passive voice in a way that makes actions seem like they happen without anyone doing them. Good documentation should always make it clear who or what is doing something. You may need to use the passive voice with error messages or make something easier to understand. Rewording any of these sentences to use the active voice would complicate the sentence or pull focus away from its main point: Responses sent from the project include Success or Error . Jitterbit Support is required to respond to requests within 4 working hours. The system was put into an error state by the transformation.","title":"When to use the passive voice"},{"location":"alt-text/","text":"Use Alt-text with Images Some of our users rely on screen reader software to read our documentation. Screen readers convert the contents on a page into speech. All images in our documentation must have alt-text so the entire page is accessible through screen reader software. This text is a written-out description of the image that a screen reader can dictate. You can find more information about website accessibility requirements on the Americans with Disabilities Act (ADA) website and on the Section 508 website. See also Write for All Users . Note It is becoming more common to see accessibility questions in requirements documents or sales quotes. Best practices All images \u2014 screenshot, diagram, GIF, or inline image \u2014 must have alt text. For inline images, GIFs, and complex diagrams, include adequate surrounding text so you don't place too much information in the alt-text . Surrounding text For an inline image, write the name or a description of the icon in the sentence. Put the icon inparentheses immediately after that text. For a complex diagram, use lines of surrounding text to explain the diagram. You can include a simple sentence in the alt-text that refers to this descriptive text. Use a complete sentence to lead into the image, using a colon as punctuation. ### Alt text When you're writing alt text for an image: Describe the meaning of the image rather than what you see. Introduce only relevant information. Don't call out implications or add new information to the alt text. For complex images, place the most important information about the image in the first sentence of alt text. If the surrounding text describes the image, add a second sentence of alt text that describes where the surrounding text is on that page. If the surrounding text doesn't describe the image, you can use multiple sentences of alt text to describe the image. Alt text examples Here are some examples of good usage. Screenshot of an activity step:","title":"Include alt-text"},{"location":"alt-text/#use-alt-text-with-images","text":"Some of our users rely on screen reader software to read our documentation. Screen readers convert the contents on a page into speech. All images in our documentation must have alt-text so the entire page is accessible through screen reader software. This text is a written-out description of the image that a screen reader can dictate. You can find more information about website accessibility requirements on the Americans with Disabilities Act (ADA) website and on the Section 508 website. See also Write for All Users .","title":"Use Alt-text with Images"},{"location":"alt-text/#note","text":"It is becoming more common to see accessibility questions in requirements documents or sales quotes.","title":"Note"},{"location":"alt-text/#best-practices","text":"All images \u2014 screenshot, diagram, GIF, or inline image \u2014 must have alt text. For inline images, GIFs, and complex diagrams, include adequate surrounding text so you don't place too much information in the alt-text .","title":"Best practices"},{"location":"alt-text/#surrounding-text","text":"For an inline image, write the name or a description of the icon in the sentence. Put the icon inparentheses immediately after that text. For a complex diagram, use lines of surrounding text to explain the diagram. You can include a simple sentence in the alt-text that refers to this descriptive text. Use a complete sentence to lead into the image, using a colon as punctuation. ### Alt text When you're writing alt text for an image: Describe the meaning of the image rather than what you see. Introduce only relevant information. Don't call out implications or add new information to the alt text. For complex images, place the most important information about the image in the first sentence of alt text. If the surrounding text describes the image, add a second sentence of alt text that describes where the surrounding text is on that page. If the surrounding text doesn't describe the image, you can use multiple sentences of alt text to describe the image.","title":"Surrounding text"},{"location":"alt-text/#alt-text-examples","text":"Here are some examples of good usage.","title":"Alt text examples"},{"location":"alt-text/#screenshot-of-an-activity-step","text":"","title":"Screenshot of an activity step:"},{"location":"anthro/","text":"Anthropomorphisms Anthropomorphisms give human characteristics to inanimate objects. Avoid giving systems, services, or other inanimate object the characteristics of people. Correct: The Get activity retrieves data from the source. This activity tests the validity of the data. Incorrect: The Get activity tells the source to retrieve the data. This activity judges the validity of the data. There are times when using an anthropomorphism is the best way to deliver the information.That's true of most rules and be judicious in breaking them.","title":"Anthropomorphisms"},{"location":"anthro/#anthropomorphisms","text":"Anthropomorphisms give human characteristics to inanimate objects. Avoid giving systems, services, or other inanimate object the characteristics of people. Correct: The Get activity retrieves data from the source. This activity tests the validity of the data. Incorrect: The Get activity tells the source to retrieve the data. This activity judges the validity of the data. There are times when using an anthropomorphism is the best way to deliver the information.That's true of most rules and be judicious in breaking them.","title":"Anthropomorphisms"},{"location":"avoidcomplexwords/","text":"Avoid Complex Word Shorter words are often more accurate and less ambiguous. Writers sometimes use long, complex words as a way to distance themselves from the text or as a way of sounding authoritative. Unless certain words or phrases are required due to regulation or contract, use the shorter, simpler word or phrase. A abort, kill, terminate (except in technical, programming documentation) abundance: plenty accelerate: speed up accentuate: stress accompany: go with accomplish: carry out or do accorded: given accordingly: so accrue: add accurate: right or exact acquiesce: agree acquire: get or buy additional: more or extra address: discuss addressees: you adjacent to: next to adjustment: change admissible: allowed advantageous: helpful advise: tell aggregate: total aircraft: plane alleviate: ease allocate: assign or divide alternatively: or alternatives: choices or options ameliorate: improve amend: change anticipate: expect apparent: clear or plain approximately: about ascertain: discover or find out assistance: help attain: meet attempt: try authorize: allow B-C belated: late bestow: give cease: stop or end collaborate: work together collaborate:use working with commence: begin compensate: pay component: part comprise: form or include concept: idea concerning: about confer: give or award consequently: so consolidate: merge constitutes: forms contains: has convene: meet D-F demonstrate: show or prove depart: leave designate: choose desire: want or wish determine: decide or find detrimental: bad or harmful dialogue is used for conversations, dialog is the interface item, as in dialog box disclose: share or tell discontinue: stop disseminate: send or give eliminate: end elucidate: explain employ: use enclosed: inside or included encounter: meet endeavor: try enumerate: count equitable: fair equivalent: equal exclusively: only execute:use run or do instead expedite: hurry facilitate: ease females: women finalize: complete or finish frequently: often I-L identical: same in order to:use to incorrect: wrong indication: sign initiate: start or begin input: use type or enter or select itemized: listed jeopardize: risk liaise: work with or partner with M-P maintain: keep or support methodology: method modify: change monitor: check or watch multiple: many necessitate: cause notify: tell numerous: many objective: aim or goal obligate: bind or compel optimum: best or most permit: let portion: part possess: own previous: earlier previously: before prioritize: rank procure: buy provide: give or offer purchase: buy R-U relocate: move simple or simply. Avoid these as something simple to a power user isn't so simple to a new user. solicit: request state-of-the-art: latest subsequent: later or next substantial: large sufficient: enough terminate: end transmit: send utilization: use utilize. use","title":"Avoid Complex Words"},{"location":"avoidcomplexwords/#avoid-complex-word","text":"Shorter words are often more accurate and less ambiguous. Writers sometimes use long, complex words as a way to distance themselves from the text or as a way of sounding authoritative. Unless certain words or phrases are required due to regulation or contract, use the shorter, simpler word or phrase.","title":"Avoid Complex Word"},{"location":"avoidcomplexwords/#a","text":"abort, kill, terminate (except in technical, programming documentation) abundance: plenty accelerate: speed up accentuate: stress accompany: go with accomplish: carry out or do accorded: given accordingly: so accrue: add accurate: right or exact acquiesce: agree acquire: get or buy additional: more or extra address: discuss addressees: you adjacent to: next to adjustment: change admissible: allowed advantageous: helpful advise: tell aggregate: total aircraft: plane alleviate: ease allocate: assign or divide alternatively: or alternatives: choices or options ameliorate: improve amend: change anticipate: expect apparent: clear or plain approximately: about ascertain: discover or find out assistance: help attain: meet attempt: try authorize: allow","title":"A"},{"location":"avoidcomplexwords/#b-c","text":"belated: late bestow: give cease: stop or end collaborate: work together collaborate:use working with commence: begin compensate: pay component: part comprise: form or include concept: idea concerning: about confer: give or award consequently: so consolidate: merge constitutes: forms contains: has convene: meet","title":"B-C"},{"location":"avoidcomplexwords/#d-f","text":"demonstrate: show or prove depart: leave designate: choose desire: want or wish determine: decide or find detrimental: bad or harmful dialogue is used for conversations, dialog is the interface item, as in dialog box disclose: share or tell discontinue: stop disseminate: send or give eliminate: end elucidate: explain employ: use enclosed: inside or included encounter: meet endeavor: try enumerate: count equitable: fair equivalent: equal exclusively: only execute:use run or do instead expedite: hurry facilitate: ease females: women finalize: complete or finish frequently: often","title":"D-F"},{"location":"avoidcomplexwords/#i-l","text":"identical: same in order to:use to incorrect: wrong indication: sign initiate: start or begin input: use type or enter or select itemized: listed jeopardize: risk liaise: work with or partner with","title":"I-L"},{"location":"avoidcomplexwords/#m-p","text":"maintain: keep or support methodology: method modify: change monitor: check or watch multiple: many necessitate: cause notify: tell numerous: many objective: aim or goal obligate: bind or compel optimum: best or most permit: let portion: part possess: own previous: earlier previously: before prioritize: rank procure: buy provide: give or offer purchase: buy","title":"M-P"},{"location":"avoidcomplexwords/#r-u","text":"relocate: move simple or simply. Avoid these as something simple to a power user isn't so simple to a new user. solicit: request state-of-the-art: latest subsequent: later or next substantial: large sufficient: enough terminate: end transmit: send utilization: use utilize. use","title":"R-U"},{"location":"bnlists/","text":"List Types Here are guidelines for bulleted lists and numbered lists. Bulleted Lists When the order of items isn't important, use an unordered or bulleted list. Alphabetize or use another order, but carry the consistency over to other lists. For example, Cloud Studio lists a connector's activity in a specific order. Bulleted lists should have: A complete lead-in sentence with a colon More than one list item Up to two levels of lists Parallel sentence construction One idea for each list item A period or other punctuation if the list items are complete sentences Here is an example of a bulleted list: The following example of a bulleted list contains a complete lead-in sentence. Each item in the list uses parallel construction and doesn't contain more than one phrase. In addition, users with an expired subscription have these permissions: * View the list of projects from the project index. * Open projects to view within the project designer. * View project and component configuration screens (for example, connection/activity, transformation, script). Numbered Lists When order is important, use ordered, or numbered lists. They're also called procedural lists. Numbered lists should have: A complete lead-in sentence with aperiod or a colon More than one list item Up to two levels of lists Parallel sentence construction One action for each item Here is an example of a numbered list for a procedure: Launch PGAdmin. Click File and select Add Server . Enter a Name for the connection. Change the Username from postgres to jitterbit . Populate the Password found in the [DbInfo] section of the Jitterbit.conf file. Optional: Set Colour , if desired. Click OK . Once the connection has been created, expand the New Connection and expand Login Roles . a. Select Properties for the postgres user . b. Click the Definition tab. c. Enter a new Password . d. Click OK .","title":"Bulleted and Numbered Lists"},{"location":"bnlists/#list-types","text":"Here are guidelines for bulleted lists and numbered lists.","title":"List Types"},{"location":"bnlists/#bulleted-lists","text":"When the order of items isn't important, use an unordered or bulleted list. Alphabetize or use another order, but carry the consistency over to other lists. For example, Cloud Studio lists a connector's activity in a specific order. Bulleted lists should have: A complete lead-in sentence with a colon More than one list item Up to two levels of lists Parallel sentence construction One idea for each list item A period or other punctuation if the list items are complete sentences Here is an example of a bulleted list: The following example of a bulleted list contains a complete lead-in sentence. Each item in the list uses parallel construction and doesn't contain more than one phrase. In addition, users with an expired subscription have these permissions: * View the list of projects from the project index. * Open projects to view within the project designer. * View project and component configuration screens (for example, connection/activity, transformation, script).","title":"Bulleted Lists"},{"location":"bnlists/#numbered-lists","text":"When order is important, use ordered, or numbered lists. They're also called procedural lists. Numbered lists should have: A complete lead-in sentence with aperiod or a colon More than one list item Up to two levels of lists Parallel sentence construction One action for each item Here is an example of a numbered list for a procedure: Launch PGAdmin. Click File and select Add Server . Enter a Name for the connection. Change the Username from postgres to jitterbit . Populate the Password found in the [DbInfo] section of the Jitterbit.conf file. Optional: Set Colour , if desired. Click OK . Once the connection has been created, expand the New Connection and expand Login Roles . a. Select Properties for the postgres user . b. Click the Definition tab. c. Enter a new Password . d. Click OK .","title":"Numbered Lists"},{"location":"bold/","text":"Bold and Italic Type Bold Type Use bold type to highlight the namesUI elements such as menus, menu items, user-input field labels, button names, window titles, etc. For text shown in dialogs, consider using the quote paragraph style or quotation marks instead. Use bold type to format the following elements: Menu items UI page elements in paragraphs or procedural steps User input Don't use bold type or strong tags for emphasis except in notes, cautions, and warnings. Italic Type Don't use italics to emphasize your text.","title":"Bold  and Italic Type"},{"location":"bold/#bold-and-italic-type","text":"","title":"Bold and Italic Type"},{"location":"bold/#bold-type","text":"Use bold type to highlight the namesUI elements such as menus, menu items, user-input field labels, button names, window titles, etc. For text shown in dialogs, consider using the quote paragraph style or quotation marks instead. Use bold type to format the following elements: Menu items UI page elements in paragraphs or procedural steps User input Don't use bold type or strong tags for emphasis except in notes, cautions, and warnings.","title":"Bold Type"},{"location":"bold/#italic-type","text":"Don't use italics to emphasize your text.","title":"Italic Type"},{"location":"brackets/","text":"Brackets Jitterbit documentation uses three types of brackets: angle brackets, curly braces, and square brackets. Angle brackets (< and >) Use angle brackets as placeholders for text for user input. Correct: Type the address in this format: https:// .example.com. Angle brackets also indicate UI navigation. See the following example: Click Format > Bold . Curly braces ( { and } ) Use these when they are part of code samples, strings, or other examples. Square brackets ( [ and ] ) Use square brackets in a .conf file section name. In the jitterbit.conf file, go to [Settings] and set EnableLocalFileLocation to false . false","title":"Brackets"},{"location":"brackets/#brackets","text":"Jitterbit documentation uses three types of brackets: angle brackets, curly braces, and square brackets.","title":"Brackets"},{"location":"brackets/#angle-brackets-and","text":"Use angle brackets as placeholders for text for user input. Correct: Type the address in this format: https:// .example.com. Angle brackets also indicate UI navigation. See the following example: Click Format > Bold .","title":"Angle brackets (&lt; and &gt;)"},{"location":"brackets/#curly-braces-and","text":"Use these when they are part of code samples, strings, or other examples.","title":"Curly braces ( { and } )"},{"location":"brackets/#square-brackets-and","text":"Use square brackets in a .conf file section name. In the jitterbit.conf file, go to [Settings] and set EnableLocalFileLocation to false . false","title":"Square brackets ( [ and ] )"},{"location":"caps/","text":"Capitalization Follow the capitalization guidelines in The Chicago Manual of Style . Some guidelines are specific to our documentation: See the Jitterbit Terminology Glossary for the correct capitalization of Jitterbit terms. Don't use capitalization for emphasis. The types of capitalization styles referenced are as follows: Titles and Heading Use title case. For example, Component Dependencies, Deletion, and Removal . Don't capitalize articles (a, an, the), coordinating conjunctions (and, but, or, nor), the \"to\" in an infinitive, and prepositions (with, to, for, in, from) unless they start a sentence. For hyphenated words, capitalize the first element and the subsequent elements unless they are articles, prepositions, and coordinating conjunctions.","title":"Capitalization"},{"location":"caps/#capitalization","text":"Follow the capitalization guidelines in The Chicago Manual of Style . Some guidelines are specific to our documentation: See the Jitterbit Terminology Glossary for the correct capitalization of Jitterbit terms. Don't use capitalization for emphasis. The types of capitalization styles referenced are as follows:","title":"Capitalization"},{"location":"caps/#titles-and-heading","text":"Use title case. For example, Component Dependencies, Deletion, and Removal . Don't capitalize articles (a, an, the), coordinating conjunctions (and, but, or, nor), the \"to\" in an infinitive, and prepositions (with, to, for, in, from) unless they start a sentence. For hyphenated words, capitalize the first element and the subsequent elements unless they are articles, prepositions, and coordinating conjunctions.","title":"Titles and Heading"},{"location":"changes/","text":"Changes This table shows the history of updates to the Jitterbit Writing Style Guide since its publication on : Date Topic Change","title":"Latest Changes to the Jitterbit Style Guide"},{"location":"changes/#changes","text":"This table shows the history of updates to the Jitterbit Writing Style Guide since its publication on : Date Topic Change","title":"Changes"},{"location":"contractions/","text":"Contractions Jitterbit documentation is informal in tone, so you can use contractions in the present tense, such as isn't , don't , and can't . Sometimes rewriting a sentence in the future-tense into the present tense is awkward or sounds stilted. It's okay to use contractions, such as won't . For more on tenses, Present Tense . Avoid using contractions formed from nouns and verbs to show possession, such as the operation's attributes . See Possessives for guidance.","title":"Contractions"},{"location":"contractions/#contractions","text":"Jitterbit documentation is informal in tone, so you can use contractions in the present tense, such as isn't , don't , and can't . Sometimes rewriting a sentence in the future-tense into the present tense is awkward or sounds stilted. It's okay to use contractions, such as won't . For more on tenses, Present Tense . Avoid using contractions formed from nouns and verbs to show possession, such as the operation's attributes . See Possessives for guidance.","title":"Contractions"},{"location":"csterms/","text":"Cloud Studio Terminology Guidelines This is an internal document intended to help us refer to Cloud Studio consistently and reinforce that terminology for both internal users and customers. The external documents with full definitions and diagrams are available at Cloud Studio User Interface and Cloud Studio Terminology . NOTE: Shortened forms should be used only in context. Do not use shortened forms unless the reference is obvious. General project : A collection of one or more workflows that comprise and execute an integration use case. project component or (shorter) component : The discrete building blocks of a project. Some components, including activities, scripts, and transformations, can be added to operations that are executed as a sequence of steps. Other components can be used in support of those operations, such as variables, schedules, file schemas, notifications, and plugins. Operations themselves are also project components. Do not use the terms operation component , workflow component or design component . workflow : A collection of operations used as a tool to help segregate different parts of the project for the convenience of the user. operation : The smallest unit within a workflow that is independently executed on an agent and recorded by Harmony. Operations define what an integration should do and when it should be done. Project Index project index or (shorter) index : The page that provides a listing of all your Cloud Studio projects. Currently the landing page for Cloud Studio. Does not include Design Studio projects. project index card view or (shorter) card view : One of two views for displaying projects in the project index. This view displays the projects as cards.Currently the default view. project index cards or (shorter) project cards , index cards , or cards : The project index card view displays projects as cards that can be flipped over to reveal details about the project. project index list view or (shorter) list view : One of two views for displaying projects in the project index. This view displays the projects in a table. Project Designer project designer or (shorter) designer : The design interface that displays after opening a project, including all three parts: project pane, design canvas, and design component palette. Do not use the terms operation designer or workflow designer . project pane or (shorter) pane : The area on the left of the project designer that contains the project name, environment name, actions menu, and Workflows and Components tabs. project navigator or (shorter) navigator : The part of the project pane containing the Workflows and Components tabs, including the search and filter capabilities. project navigation tree or (shorter) navigation tree or tree : The tree within either the Workflows or Components tab. Workflows tab: One of two tabs available within the project navigator, focusing on individual workflows, their operations, and the steps used to execute those operations. | Components tab: One of two tabs available within the project navigator, showing all project components and identifying whether they are used in support of an operation. design canvas or (shorter) canvas : The central area of the project designer serving as the primary workspace where you visually design your integrations. Do not use the terms project canvas , workflow canvas , or operation canvas . design canvas elements or (shorter) canvas elements , design elements : Anything that is directly visible on the canvas outside of an operation, such as an email component or operation action lines. operation steps or (shorter) steps or (longer) steps of an operation : The discrete components that make up an operation and are represented by component blocks (scripts, activities, transformations).Do not use the term operation components . If you are referring to components used in support of an operation, state so explicitly or use the term project components .) design component palette or (shorter) component palette , design palette , or palette : The area on the right of the project designer that provides access to project components thatcan be used on the design canvas. Do not use the term connectivity palette . Currently, thispalette contains only one tab providing access to connectivity resources. As this will be expanded on in the future, we should avoid referring to this as a connectivity **palette. Design Component Palette Connectivity tab: The tab within the design component palette that provides access to connectivity resources. Within this tab, connectors are first configured to create connections. Activities associated with those connections can then be added to operations on the design canvas and configured as sources or targets. An endpoint refers to a specific connection and its activities. Currently there is only one tab. If you have an issue referring to a tab when multiple tabs are present, reword to avoid this reference. For example: The design component palette provides access to connectivity resources . connector : Provides the interface for entering user-provided input such as credentials to create an authenticated connection. The Connectors filter shows the types of connectors that can be configured. In addition, you can create custom connectors using Connector Builder or the Connector SDK. connection : Authenticated access to a data resource that has been configured using a connector. The Endpoints filter shows these configured connections. Existing connections can be edited by double-clicking on the connection in the palette. activity : An interaction with a connection that can be configured with user-provided input such as data structures that represent the \"request\" and \"response\" schemas for that action. The Endpoints filter shows the configured connections, which can be clicked to reveal the types of activities that can be added to an operation. Those activities are then able to be dragged to operations on the design canvas, where they can be configured by double-clicking on the activity within the operation. Configured activities can act as sources (providing data within an operation) or targets (receiving data within an operation). endpoint A specific connection and its activities, which are added to an operation and then configured as sources or targets within the operation. Scripts and Transformations script : Scripts, written in either Jitterbit Script or JavaScript, provide the flexibility and power to transform data, perform calculations, or perform logic validation beyond simple field mapping. transformation : A project component that is used as a step in an operation to map or transform inputs to a resulting output by moving data, cleaning data, or applying business logic. A transformation consists of source and target schemas that have been defined in the transformation and the transformation mapping that generates the output transformation mapping : A transformation mapping consists of target fields or nodes and their corresponding scripts. These scripts may contain references to source fields or nodes or to project components, use functions, or contain other valid script logic. A mapping does not include target fields that are not mapped. script component palette or (shorter) component palette , script palette , palette : The area on the right of the script and script mode transformation configuration screens that provides access to functions and project components that can be used within scripts. The script palette on the transformation screen includes access to an additional tab, Source Objects . Refer to each tab by its appropriate name, as labeled in the product. mapping mode : A display mode for viewing or editing a transformation. This mode provides a visual overview of the mapping and the basic tools to perform the mapping. This is the default mode. script mode : A display mode for viewing or editing a transformation. This mode provides detailed views of fields and advanced tools for adding scripts to the mapping.","title":"Cloud Studio Terminology"},{"location":"csterms/#cloud-studio-terminology-guidelines","text":"This is an internal document intended to help us refer to Cloud Studio consistently and reinforce that terminology for both internal users and customers. The external documents with full definitions and diagrams are available at Cloud Studio User Interface and Cloud Studio Terminology . NOTE: Shortened forms should be used only in context. Do not use shortened forms unless the reference is obvious.","title":"Cloud Studio Terminology Guidelines"},{"location":"csterms/#general","text":"project : A collection of one or more workflows that comprise and execute an integration use case. project component or (shorter) component : The discrete building blocks of a project. Some components, including activities, scripts, and transformations, can be added to operations that are executed as a sequence of steps. Other components can be used in support of those operations, such as variables, schedules, file schemas, notifications, and plugins. Operations themselves are also project components. Do not use the terms operation component , workflow component or design component . workflow : A collection of operations used as a tool to help segregate different parts of the project for the convenience of the user. operation : The smallest unit within a workflow that is independently executed on an agent and recorded by Harmony. Operations define what an integration should do and when it should be done.","title":"General"},{"location":"csterms/#project-index","text":"project index or (shorter) index : The page that provides a listing of all your Cloud Studio projects. Currently the landing page for Cloud Studio. Does not include Design Studio projects. project index card view or (shorter) card view : One of two views for displaying projects in the project index. This view displays the projects as cards.Currently the default view. project index cards or (shorter) project cards , index cards , or cards : The project index card view displays projects as cards that can be flipped over to reveal details about the project. project index list view or (shorter) list view : One of two views for displaying projects in the project index. This view displays the projects in a table.","title":"Project Index"},{"location":"csterms/#project-designer","text":"project designer or (shorter) designer : The design interface that displays after opening a project, including all three parts: project pane, design canvas, and design component palette. Do not use the terms operation designer or workflow designer . project pane or (shorter) pane : The area on the left of the project designer that contains the project name, environment name, actions menu, and Workflows and Components tabs. project navigator or (shorter) navigator : The part of the project pane containing the Workflows and Components tabs, including the search and filter capabilities. project navigation tree or (shorter) navigation tree or tree : The tree within either the Workflows or Components tab. Workflows tab: One of two tabs available within the project navigator, focusing on individual workflows, their operations, and the steps used to execute those operations. | Components tab: One of two tabs available within the project navigator, showing all project components and identifying whether they are used in support of an operation. design canvas or (shorter) canvas : The central area of the project designer serving as the primary workspace where you visually design your integrations. Do not use the terms project canvas , workflow canvas , or operation canvas . design canvas elements or (shorter) canvas elements , design elements : Anything that is directly visible on the canvas outside of an operation, such as an email component or operation action lines. operation steps or (shorter) steps or (longer) steps of an operation : The discrete components that make up an operation and are represented by component blocks (scripts, activities, transformations).Do not use the term operation components . If you are referring to components used in support of an operation, state so explicitly or use the term project components .) design component palette or (shorter) component palette , design palette , or palette : The area on the right of the project designer that provides access to project components thatcan be used on the design canvas. Do not use the term connectivity palette . Currently, thispalette contains only one tab providing access to connectivity resources. As this will be expanded on in the future, we should avoid referring to this as a connectivity **palette.","title":"Project Designer"},{"location":"csterms/#design-component-palette","text":"Connectivity tab: The tab within the design component palette that provides access to connectivity resources. Within this tab, connectors are first configured to create connections. Activities associated with those connections can then be added to operations on the design canvas and configured as sources or targets. An endpoint refers to a specific connection and its activities. Currently there is only one tab. If you have an issue referring to a tab when multiple tabs are present, reword to avoid this reference. For example: The design component palette provides access to connectivity resources . connector : Provides the interface for entering user-provided input such as credentials to create an authenticated connection. The Connectors filter shows the types of connectors that can be configured. In addition, you can create custom connectors using Connector Builder or the Connector SDK. connection : Authenticated access to a data resource that has been configured using a connector. The Endpoints filter shows these configured connections. Existing connections can be edited by double-clicking on the connection in the palette. activity : An interaction with a connection that can be configured with user-provided input such as data structures that represent the \"request\" and \"response\" schemas for that action. The Endpoints filter shows the configured connections, which can be clicked to reveal the types of activities that can be added to an operation. Those activities are then able to be dragged to operations on the design canvas, where they can be configured by double-clicking on the activity within the operation. Configured activities can act as sources (providing data within an operation) or targets (receiving data within an operation). endpoint A specific connection and its activities, which are added to an operation and then configured as sources or targets within the operation.","title":"Design Component Palette"},{"location":"csterms/#scripts-and-transformations","text":"script : Scripts, written in either Jitterbit Script or JavaScript, provide the flexibility and power to transform data, perform calculations, or perform logic validation beyond simple field mapping. transformation : A project component that is used as a step in an operation to map or transform inputs to a resulting output by moving data, cleaning data, or applying business logic. A transformation consists of source and target schemas that have been defined in the transformation and the transformation mapping that generates the output transformation mapping : A transformation mapping consists of target fields or nodes and their corresponding scripts. These scripts may contain references to source fields or nodes or to project components, use functions, or contain other valid script logic. A mapping does not include target fields that are not mapped. script component palette or (shorter) component palette , script palette , palette : The area on the right of the script and script mode transformation configuration screens that provides access to functions and project components that can be used within scripts. The script palette on the transformation screen includes access to an additional tab, Source Objects . Refer to each tab by its appropriate name, as labeled in the product. mapping mode : A display mode for viewing or editing a transformation. This mode provides a visual overview of the mapping and the basic tools to perform the mapping. This is the default mode. script mode : A display mode for viewing or editing a transformation. This mode provides detailed views of fields and advanced tools for adding scripts to the mapping.","title":"Scripts and Transformations"},{"location":"dates/","text":"Dates and Time When writing about dates and times that appear in a Jitterbit product US, duplicate the date format exactly as the UI displays. Dates Use numerals for numbers associated with dates, even if the number is less than 10. Spell out the day of the week and the month. Don't use ordinals, such as 1st, 2nd, 3rd, and so on. Here are some examples: March 28 Monday, March 30 Tuesday, March 31, 2020 July 2020 03-11-2020 APAC and EMEA Dates When writing Release Notes or specific content for APAC and EMEA, use the DD-MM-YYYY format. If you are just using digits, use the YYYY-MM-DD format. For example: * 28 March 2020 * Monday, 30 March * Tuesday, 31 March 2020 * 2020-03-11 Time Always use a numeral for numbers associated with time. For example: Logs are removed very 5 hours. You can change the default setting from 5 minutes to 120 minutes. Our hours are 8:00 am to 5:00 am, Pacific time. Use 12-hour time for NA. APAC and EMEA Time Use the 24-hour clock for time. For example: The Production Cloud Agent Group is scheduled to be upgraded in the APAC region from 2020-03-11 13:00 UTC through 2020-03-11 19:00 UTC (We dnesday, March 11, 2020 from 6:00 am through 12 noon PDT). NOTE: Pay close attention to Standard and Daylight Saving Time changes in North America when reporting time.","title":"Dates and Time"},{"location":"dates/#dates-and-time","text":"When writing about dates and times that appear in a Jitterbit product US, duplicate the date format exactly as the UI displays.","title":"Dates and Time"},{"location":"dates/#dates","text":"Use numerals for numbers associated with dates, even if the number is less than 10. Spell out the day of the week and the month. Don't use ordinals, such as 1st, 2nd, 3rd, and so on. Here are some examples: March 28 Monday, March 30 Tuesday, March 31, 2020 July 2020 03-11-2020","title":"Dates"},{"location":"dates/#apac-and-emea-dates","text":"When writing Release Notes or specific content for APAC and EMEA, use the DD-MM-YYYY format. If you are just using digits, use the YYYY-MM-DD format. For example: * 28 March 2020 * Monday, 30 March * Tuesday, 31 March 2020 * 2020-03-11","title":"APAC and EMEA Dates"},{"location":"dates/#time","text":"Always use a numeral for numbers associated with time. For example: Logs are removed very 5 hours. You can change the default setting from 5 minutes to 120 minutes. Our hours are 8:00 am to 5:00 am, Pacific time. Use 12-hour time for NA.","title":"Time"},{"location":"dates/#apac-and-emea-time","text":"Use the 24-hour clock for time. For example: The Production Cloud Agent Group is scheduled to be upgraded in the APAC region from 2020-03-11 13:00 UTC through 2020-03-11 19:00 UTC (We dnesday, March 11, 2020 from 6:00 am through 12 noon PDT). NOTE: Pay close attention to Standard and Daylight Saving Time changes in North America when reporting time.","title":"APAC and EMEA Time"},{"location":"dllinks/","text":"Links We use links to topics within our documentation, links to downloads, and links to third-party sites. Within Our Documentation Follow these guidelines when linking to Jitterbit documentation: * Use See to introduce a link in the sentence and always use the full topic title for the link. * Don't use quotation marks, bold, or other formatting in the link text. Punctuation that isn't part of the title does not belong in the link. Correct: To add additional roles, you can create custom roles. See Create a custom role. Incorrect: To add additional roles, you can create custom roles. When linking to this type of material Include this information in the link Example A product Link to the documentation page for that product. For information about Data Loader , see the Data Loader documentation. An overview page Link to the first topic product. To learn about Cloud Studio projects, see Jitterbit Cloud Studio Projects. A main topic Link to the first page in the topic. Use the name of page as the display name for the link. To learn about deploying projects, see Project Deployment. A topic in a different product When linking to a topic in a different product, include the product name before the topic name. See Portal Manaager in API Manager. A topic subheading When linking to a subheading in the same topic, link to the section name. See Initialize Portal Manager. Links to Downloads When you link to a downloadable file, Use the file name or document name as the display name of the link. You don't need to include an extension unless you are linking to a speficic file. Examples: Download the ClarizenExample.jpk file. Download What's New in Jitterbit Harmony Summer '16 . Links Third-Party Sites Avoid creating deep links to specific pages outside of Jitterbit website. Instead, link to the main topic or document. For example, Information on Snowflake stored procedures is available from Snowflake at Stored Procedures and Stored Procedure Management & Usage .","title":"Link Types"},{"location":"dllinks/#links","text":"We use links to topics within our documentation, links to downloads, and links to third-party sites.","title":"Links"},{"location":"dllinks/#within-our-documentation","text":"Follow these guidelines when linking to Jitterbit documentation: * Use See to introduce a link in the sentence and always use the full topic title for the link. * Don't use quotation marks, bold, or other formatting in the link text. Punctuation that isn't part of the title does not belong in the link. Correct: To add additional roles, you can create custom roles. See Create a custom role. Incorrect: To add additional roles, you can create custom roles. When linking to this type of material Include this information in the link Example A product Link to the documentation page for that product. For information about Data Loader , see the Data Loader documentation. An overview page Link to the first topic product. To learn about Cloud Studio projects, see Jitterbit Cloud Studio Projects. A main topic Link to the first page in the topic. Use the name of page as the display name for the link. To learn about deploying projects, see Project Deployment. A topic in a different product When linking to a topic in a different product, include the product name before the topic name. See Portal Manaager in API Manager. A topic subheading When linking to a subheading in the same topic, link to the section name. See Initialize Portal Manager.","title":"Within Our Documentation"},{"location":"dllinks/#links-to-downloads","text":"When you link to a downloadable file, Use the file name or document name as the display name of the link. You don't need to include an extension unless you are linking to a speficic file. Examples: Download the ClarizenExample.jpk file. Download What's New in Jitterbit Harmony Summer '16 .","title":"Links to Downloads"},{"location":"dllinks/#links-third-party-sites","text":"Avoid creating deep links to specific pages outside of Jitterbit website. Instead, link to the main topic or document. For example, Information on Snowflake stored procedures is available from Snowflake at Stored Procedures and Stored Procedure Management & Usage .","title":"Links Third-Party Sites"},{"location":"doctitlehed/","text":"Document Names, Topic Titles, and Section Headings Be succinct and descriptive. Titles should include a product name to quickly orient a user arriving from a search. Clear and consistent headings help users locate information quickly. Best practices Avoid content-free terms such as Guide . Use a descriptive verb such as Using or Configuring . Write using words that are short, descriptive, and specific. Promote what a user can do with the product. Don't use titles and headings that describe a feature. Avoid vague phrases such as Other , Miscellaneous , Introduction , or Before You Begin . You can also use a noun that describes the content, such as Release Notes or Known Issues . See Capitalization for guidance on proper capitalization.","title":"Document Names, Topic Titles, and Section Headings"},{"location":"doctitlehed/#document-names-topic-titles-and-section-headings","text":"Be succinct and descriptive. Titles should include a product name to quickly orient a user arriving from a search. Clear and consistent headings help users locate information quickly. Best practices Avoid content-free terms such as Guide . Use a descriptive verb such as Using or Configuring . Write using words that are short, descriptive, and specific. Promote what a user can do with the product. Don't use titles and headings that describe a feature. Avoid vague phrases such as Other , Miscellaneous , Introduction , or Before You Begin . You can also use a noun that describes the content, such as Release Notes or Known Issues . See Capitalization for guidance on proper capitalization.","title":"Document Names, Topic Titles, and Section Headings"},{"location":"everyone/","text":"Write for All Users Always aim to write content that all users can access and understand, regardless of background or level of ability. Make content accessible for all audiences, with or without disabilities. Use these guidelines when creating content. Writing Use plain language, simple sentence construction, and short paragraphs. Complex sentences and long paragraphs can be a struggle for some users. Plain language makes a smoother, better experience. Consider that some readers use screen readers or other assistive devices. Avoid using complex words and avoid technical jargon or complicated technological terms. If you must use technical terms, be consistent. Use Plain Language offers guidance. Avoid language that relies on spatial direction Spatial directional language doesn't help users with screen readers. Instead of using above , below , left , or right to direct users, use earlier , later , or following . Avoid relying only on visual language, such as text referring to color, shape, and patterns. Refer to UI elements using their labels whenever possible, and don't rely on directional or visual language as the only means to guide users to a location. Lead into new page elements such as tables, lists, images, videos, searches, commands, and code blocks. Introduce a new page element with a lead-in sentence that explains what information the element contains or what the user needs to do. These lead-in sentences can prepare users for what to expect. Spell it out Avoid unnecessary abbreviations, acronyms, and initialisms Spell out words like and , plus , minus , and approximately instead of using symbols. See Abbreviations and Acronyms and Initialisms . Be precise and exact Make sure that the noun that a pronoun refers to us clear. It may be unclear, too broad, or placed a distance from the pronoun. This can make the sentence vague and confusing for users with reading disabilities. Here are some vague sentences and more precise alternatives: Vague: This leads to an invalid activity. This is similar to JavaScript, with with important differences. Precise: Undefined variables lead to an invalid activity. Jitterbit Script is similar to JavaScript, with important differences. Titles and Document and Section Headings Headings help break up long text passages and help all readers navigate through a page. Descriptive titles and headings are essential for successful searches. Sighted and screen reader users scan through headings to determine where they need to go. Sections organized by headings are easier to parse than long sections with fewer headings. Make your headings descriptive and well-organized. It makes it much easier for our users to understand the documentation. Organize your topic using headers down to the H4 level. If you need to use a heading level beyond an H4, your topic might be too complex. Never skip heading hierarchy levels. For more guidance on headings, see Document Names, Topic Titles, and Section Headings . Images and Figures Images can help readers understand complex topics, locate an icon, or zero in on a portion of the UI. However, don't include images without alt-text or surrounding test with limited vision. Ask yourself, Does this image help the user to understand the text? Have I included alt-text for screen readers? . Alt-text is crucial for helping visually impaired users understand and use our software and services. Some users aren't native English speakers and use translation tools to translate alt-text for images with accompanying English labels. Here are some tips for using image: Don't include new information in an image. Introduce new information in the surrounding text of the image. Don't rely on color to convey the message of the image. Use a combination of colors, shapes, patterns, explanatory text, and labels instead. Ensure your image meets the contrast ratio for users with visual disabilities. See WebAIM Contrast Checker on the WebAIM website. Always include alt-text. For guidance on writing alt-text, see Include alt-text . Lead into an image with a description of the content and the purpose of the image that makes the image meaningful. For more information, see Best Practices: Images . Videos If you include videos, include captions and transcripts. Synchronize captions with the video and include all dialogue and important sound effects. If your video covers important visual details, describe them in the audio. Tables Tables are effective at organizing and presenting information, so keep tables as simple as possible.Tables with bulleted or numbered lists or with merged cells present problems for screen readers. Use a non-breaking space instead of a blank in an empty cell. Screen readers won't skip over the cell, causing confusion. See Best Practices: Tables for more information. Lists Use simple lists. Use parallel construction for list items. Use one item or idea for a single list item. Consistent patterns and simple lists won't cause problems for screen readers or confusion for readers with disabilities. See Best Practices: Lists for more information. Linking Links should be clear, descriptive, and meaningful. Don't add links just because they're available. Make each link count! Lead into each link with a description so that users can decide if that link is useful to them. See Best Practices: Link s for more information.","title":"Write for All Users"},{"location":"everyone/#write-for-all-users","text":"Always aim to write content that all users can access and understand, regardless of background or level of ability. Make content accessible for all audiences, with or without disabilities. Use these guidelines when creating content.","title":"Write for All Users"},{"location":"everyone/#writing","text":"Use plain language, simple sentence construction, and short paragraphs. Complex sentences and long paragraphs can be a struggle for some users. Plain language makes a smoother, better experience. Consider that some readers use screen readers or other assistive devices. Avoid using complex words and avoid technical jargon or complicated technological terms. If you must use technical terms, be consistent. Use Plain Language offers guidance.","title":"Writing"},{"location":"everyone/#avoid-language-that-relies-on-spatial-direction","text":"Spatial directional language doesn't help users with screen readers. Instead of using above , below , left , or right to direct users, use earlier , later , or following . Avoid relying only on visual language, such as text referring to color, shape, and patterns. Refer to UI elements using their labels whenever possible, and don't rely on directional or visual language as the only means to guide users to a location. Lead into new page elements such as tables, lists, images, videos, searches, commands, and code blocks. Introduce a new page element with a lead-in sentence that explains what information the element contains or what the user needs to do. These lead-in sentences can prepare users for what to expect.","title":"Avoid language that relies on spatial direction"},{"location":"everyone/#spell-it-out","text":"Avoid unnecessary abbreviations, acronyms, and initialisms Spell out words like and , plus , minus , and approximately instead of using symbols. See Abbreviations and Acronyms and Initialisms .","title":"Spell it out"},{"location":"everyone/#be-precise-and-exact","text":"Make sure that the noun that a pronoun refers to us clear. It may be unclear, too broad, or placed a distance from the pronoun. This can make the sentence vague and confusing for users with reading disabilities. Here are some vague sentences and more precise alternatives: Vague: This leads to an invalid activity. This is similar to JavaScript, with with important differences. Precise: Undefined variables lead to an invalid activity. Jitterbit Script is similar to JavaScript, with important differences.","title":"Be precise and exact"},{"location":"everyone/#titles-and-document-and-section-headings","text":"Headings help break up long text passages and help all readers navigate through a page. Descriptive titles and headings are essential for successful searches. Sighted and screen reader users scan through headings to determine where they need to go. Sections organized by headings are easier to parse than long sections with fewer headings. Make your headings descriptive and well-organized. It makes it much easier for our users to understand the documentation. Organize your topic using headers down to the H4 level. If you need to use a heading level beyond an H4, your topic might be too complex. Never skip heading hierarchy levels. For more guidance on headings, see Document Names, Topic Titles, and Section Headings .","title":"Titles and Document and Section Headings"},{"location":"everyone/#images-and-figures","text":"Images can help readers understand complex topics, locate an icon, or zero in on a portion of the UI. However, don't include images without alt-text or surrounding test with limited vision. Ask yourself, Does this image help the user to understand the text? Have I included alt-text for screen readers? . Alt-text is crucial for helping visually impaired users understand and use our software and services. Some users aren't native English speakers and use translation tools to translate alt-text for images with accompanying English labels. Here are some tips for using image: Don't include new information in an image. Introduce new information in the surrounding text of the image. Don't rely on color to convey the message of the image. Use a combination of colors, shapes, patterns, explanatory text, and labels instead. Ensure your image meets the contrast ratio for users with visual disabilities. See WebAIM Contrast Checker on the WebAIM website. Always include alt-text. For guidance on writing alt-text, see Include alt-text . Lead into an image with a description of the content and the purpose of the image that makes the image meaningful. For more information, see Best Practices: Images .","title":"Images and Figures"},{"location":"everyone/#videos","text":"If you include videos, include captions and transcripts. Synchronize captions with the video and include all dialogue and important sound effects. If your video covers important visual details, describe them in the audio.","title":"Videos"},{"location":"everyone/#tables","text":"Tables are effective at organizing and presenting information, so keep tables as simple as possible.Tables with bulleted or numbered lists or with merged cells present problems for screen readers. Use a non-breaking space instead of a blank in an empty cell. Screen readers won't skip over the cell, causing confusion. See Best Practices: Tables for more information.","title":"Tables"},{"location":"everyone/#lists","text":"Use simple lists. Use parallel construction for list items. Use one item or idea for a single list item. Consistent patterns and simple lists won't cause problems for screen readers or confusion for readers with disabilities. See Best Practices: Lists for more information.","title":"Lists"},{"location":"everyone/#linking","text":"Links should be clear, descriptive, and meaningful. Don't add links just because they're available. Make each link count! Lead into each link with a description so that users can decide if that link is useful to them. See Best Practices: Link s for more information.","title":"Linking"},{"location":"examples/","text":"Example Names and Domains If you need to create a fictitious name, email address, domain name, phone number, or IP address in your docs, create an example that adheres to the following guidance. Names If you need a fictitious name for an example in your docs, be sensitive to culture, religious affiliation, holidays, traditions, politics, and business. Make sure that the name you create reflects the wide range of names used around the world. Don't use a fictional character that's currently in copyright, your own name, the name of friends, or the name of family members in an example. Here are some examples of good names to use: Don Adams Lisa DiLeo Wanda Olsen Lisette DeRoche Aditya Patel Zhi Ruo Domain Names It's safe to use example.com in documentation. The Internet Assigned Numbers Authority (IANA) set aside this domain specifically for documentation needs. Email addresses If you need a fictitious email address for an example in your docs, use a name at follows the guidance in the Names section. Never use your own name, or the name of friends or family members, in an example email address. See the following examples: info@example.com don.adams@example.com lisa,dileo@example.com wanda.olsen@example.com lderoche@example.com maria@example.com aditya@example.com zhi.rho@example.com Phone numbers If you need a fictitious phone number for an example in your docs, use a North American phone number in the range +1-800-555-0000 through +1-800-555-9999. This is a safe range of phone numbers to use in examples. Never use a real phone number as a phone number example. IP addresses If you need a fictitious IP address for an example in your docs, use the blocks 192.0.2.0/24 (TEST-NET-1), 198.51.100.0/24 (TEST-NET-2), or 203.0.113.0/24 (TEST-NET-3).","title":"Example Names and Domains"},{"location":"examples/#example-names-and-domains","text":"If you need to create a fictitious name, email address, domain name, phone number, or IP address in your docs, create an example that adheres to the following guidance.","title":"Example Names and Domains"},{"location":"examples/#names","text":"If you need a fictitious name for an example in your docs, be sensitive to culture, religious affiliation, holidays, traditions, politics, and business. Make sure that the name you create reflects the wide range of names used around the world. Don't use a fictional character that's currently in copyright, your own name, the name of friends, or the name of family members in an example. Here are some examples of good names to use: Don Adams Lisa DiLeo Wanda Olsen Lisette DeRoche Aditya Patel Zhi Ruo","title":"Names"},{"location":"examples/#domain-names","text":"It's safe to use example.com in documentation. The Internet Assigned Numbers Authority (IANA) set aside this domain specifically for documentation needs.","title":"Domain Names"},{"location":"examples/#email-addresses","text":"If you need a fictitious email address for an example in your docs, use a name at follows the guidance in the Names section. Never use your own name, or the name of friends or family members, in an example email address. See the following examples: info@example.com don.adams@example.com lisa,dileo@example.com wanda.olsen@example.com lderoche@example.com maria@example.com aditya@example.com zhi.rho@example.com","title":"Email addresses"},{"location":"examples/#phone-numbers","text":"If you need a fictitious phone number for an example in your docs, use a North American phone number in the range +1-800-555-0000 through +1-800-555-9999. This is a safe range of phone numbers to use in examples. Never use a real phone number as a phone number example.","title":"Phone numbers"},{"location":"examples/#ip-addresses","text":"If you need a fictitious IP address for an example in your docs, use the blocks 192.0.2.0/24 (TEST-NET-1), 198.51.100.0/24 (TEST-NET-2), or 203.0.113.0/24 (TEST-NET-3).","title":"IP addresses"},{"location":"glossary/","text":"Jitterbit Terminology Glossary Note : This topic is for use by the Sales, Marketing, Alliances, and CSM teams. Do not distribute externally. Jitterbit Messaging Terminology Business-to-Business (B2B) Integration : B2B integration refers to the integration, automation, and optimization of business processes that extend outside an organization. Jitterbit connects businesses in industries such as Healthcare, Finance, and Retail by supporting more than 5,000 document standards and 25,000 transaction sets, EDI formats (e.g. X12, EDIFACT, TRADACOMS, XML, CICA, HL7, FHIR), industry-specific formats, and formats with extremely complex file schemas. See customer examples including Matouk and Bounce Energy . Jitterbit also supports modern B2B integration scenarios involving partner enablement through a Hub/ELA Integration Model. Business Process Automation (BPA) / Robotic Process Automation (RPA) : Many customers use the Jitterbit Harmony API Integration Platform to automate their business processes by using iPaaS to trigger actions, tasks, and alerts based on data. Some of them (including Salesforce and Intelliflo) refer to this as Robotic Process Automation (RPA). Customers can loosely couple and re-use these services within the Jitterbit Harmony Design Studio to orchestrate business process flows as needed. A good example of this is Salesforce, which uses Jitterbit to automate more than 3,500 internal orchestrations across departments such as Revenue Operations, M&A, and IT. Business Process Management (BPM) : BPM is the discipline of improving a business process from end to end through analysis, improvement, monitoring, and optimization. Jitterbit powers BPM by providing a dedicated tool for backend data flow and integration, enabling a wide range of use cases from automating engineering processes to streamlining approvals and alerts. Jitterbit\u2019s interface is used during the design stage, as well as over time, allowing stakeholders to easily review, refine, and improve processes. Continuous Integration / Continuous Delivery (or Deployment) (CI/CD) : CI/CD is a software development practice that allows for frequent or immediate deployment of new product changes. This practice requires automation across all development cycles, from building to testing, approving, and releasing. Jitterbit not only facilitates integration with third-party CI/CD apps and toolkits (Jenkins, GitHub, etc.), but also has built-in capabilities, such as migration, deployment, and scheduled operation triggers, that enable customers to use this practice seamlessly without the need for additional tools. Connectivity : Connectivity is the ability of a platform to support native communication protocols supported by the targeted endpoints. The Jitterbit Harmony API Integration Platform provides tools to connect, expose, and use your data using almost any format, protocol, and method of communication. Demo : At Jitterbit, a demo is a demonstration of capabilities of the Jitterbit Harmony API Integration Platform with regard to eiPaas and API capabilities germane to a customer\u2019s integration and/or API needs. A demo does not necessarily mean that it was customized with customer requirements. In contrast, see the definition for Proof of Concept (POC) . Endpoints : Endpoints, also known as connections, are systems and applications where data is stored or business logic is located. Jitterbit integrates and synchronizes data between endpoints such as databases, APIs, files, applications, etc. Refer to Endpoint Definitions for the latest on what Jitterbit defines as endpoints. Enterprise Service Bus (ESB) : An ESB is a software architecture used to connect enterprise applications and services so they can communicate with each other. The Jitterbit Harmony API Integration Platform is used as as a full-blown integration broker, handing off, merging, and manipulating information on an as-needed basis. Enterprise License Agreement (ELA) : TO COME Hub Model : A Hub model is a flexible licensing model that supports an enterprise\u2019s complex internal and external integrations with its business partners, using a scalable platform to centrally design, deploy, and manage business data workflows across a variety of integration scenarios. Internet of Things (IoT) Integration : The Jitterbit Harmony API Integration Platform supports IoT for batch transfers as well as real-time communication and queueing, including manual acknowledgement messaging and traffic proxying. Customers can provide an API interface for IoT devices to communicate with backend systems and data repositories, using Harmony's scale and performance for high volumes of concurrent requests from various devices. Jitterbit has demonstrated support for Microsoft Azure IoT Suite (Hub) and Salesforce IoT Cloud (see video with Salesforce at Dreamforce). Jitterbit Assurance : Jitterbit Assurance\u2122 refers to Jitterbit\u2019s promise to provide each customer a tailored journey that maximizes value based on the customer\u2019s desired business outcomes. Jitterbit Assurance reflects Jitterbit\u2019s customer-first culture combined with years of integration experience. At the heart of Jitterbit Assurance is a designated, named Customer Success Manager (CSM) responsible for ensuring the customer achieves their business goals. Each customer journey begins with the CSM and customer codifying a multi-phased \u201cSuccess Plan\u201d that links each step of the customer\u2019s journey to the customer\u2019s business outcomes. Success plans are reviewed regularly with the client and Jitterbit executive leadership and are signed off only when the customer\u2019s business outcomes are met (as opposed to when the solution is configured and deployed). The CSM serves as a key escalation point, fully empowered by Jitterbit leadership to engage in real-time all Jitterbit assets and personnel impacting the client experience including Professional Services, Technical Account Management, Support, Operations, Solutions Engineering, and Jitterbit executive leadership to remove any impediment to customer success. Jitterbit TAM Service : The Jitterbit Technical Account Manager (TAM) service offers white-glove attention and proven integration strategy advice to customers and partners interested in maximizing the value of their Jitterbit solution and becoming masters of digital connections. The Jitterbit TAM works hand in hand with customers and partners C-level executives, directors, and program managers in pursuit of the following: Acquiring a systemic perspective of the customer's or partner's integration landscape and its value and impact to the business. Developing a deep understanding of the customer's or partner's integration strategy and short-term and long-term use cases. Advising the customer or partner on integration strategy and architecture best practices as it pertains to the use of Jitterbit technology. Acting as a technical liaison between the customer or partner and Jitterbit to communicate product roadmap; identify and advocate product features that would most rapidly benefit the customer or partner; and provide technical guidance and project reviews. Orchestration : In Jitterbit, an orchestration is made up of the logical steps performed within an operation chain in support of the integration scenario. Consisting of a set of linked operations, an orchestration is the combination of on-success and on-failure flows, as well as any dynamic flows that are triggered by events or payload data. Plan of Record (POR) : A POR is a Jitterbit internal budgeting document, used to manage leads-to-conversion ratios vs. projected revenue. Proof of Concept (POC) : At Jitterbit, a POC is a proof of capabilities of the Jitterbit Harmony API Integration Platform that allows Jitterbit to prove our capabilities to support a customer\u2019s integration and API needs. Usually, a POC is driven by customer-specific requirements and sometimes executed within the customer\u2019s own infrastructure. Jitterbit\u2019s POC approach is a key differentiator that sets us apart from competitors. Root Cause Analysis (RCA) : A Root Cause Analysis (RCA) is an evaluation of the underlying cause of a problem. At Jitterbit, we post an RCA to our Trust site ( trust.jitterbit.com ) after any potential outages or significant degradation of service to transparently and openly explain to affected customers what happened, why, and the steps we are taking to prevent the problem from recurring. Note that the same Trust site is also used to communicate non-impacting scheduled events, such as regular releases. Rough Order Magnitude (ROM) : A ROM is a document managed by the Jitterbit Sales Engineering (SE) team that provides a high-level scope of the cost of services attached to a prospect\u2019s project. A ROM is an 80/20 approach to scoping and sizing Jitterbit implementations. It lacks the precision of detailed scoping but offers speed and a path to closing a deal quickly. A ROM looks at the factors that most impact the time and effort associated with particular use cases, including these: Application endpoint Batch or near real time One way or bi-directional Data volumes (1,000s, 10,000s, or >500,000) Data quality (high, medium, or low) Objects involved (price book, accounts, contacts) Jitterbit Integration Personas API Consumer : Jitterbit customers' internal and external users who use the Portals within the Jitterbit Harmony API Manager: Internal API Consumer : A Jitterbit direct customer or a user authorized by the Jitterbit customer (e.g., Jitterbit customer employees or contractors). External API Consumer : A third party that is affiliated with the Jitterbit customer (e.g., Jitterbit customer partners, customers, or vendors). API Publisher : Jitterbit customers (developers) who create APIs and publish Portals using the Jitterbit Harmony API Manager. Citizen Integrator : A Citizen Integrator is typically a Line of Business user, such as a Software as a Service (SaaS) or HR Admin within a department who is responsible for orchestrating simple integration projects between endpoints, with the goal of moving or syncing data between applications. These users use Jitterbit Harmony Citizen Integrator to manage recipes. Technical Business Analyst : A Technical Business Analyst is a Jitterbit Harmony Studio user who authors design configurations that leverage integrations and APIs. Their goal is to create integration projects that move information either in batch or in real-time between applications, seamlessly sharing information between departments within their enterprise and with their external partners. Developer : TO COME Integration Architect : An Integration Architect is a person responsible for designing, identifying integration project requirements and working with stakeholders in the implementation of projects/integration initiatives in a timely manner. Further, they are also responsible for monitoring integration operations within an enterprise and enforcing governance, policies. Their goal is to monitor integration operations as well as any of their hosted and managed Jitterbit assets using the Jitterbit Harmony Management Console. Business Decision Maker : A line of business executive who has the budget to purchase Jitterbit. This person is interested in the best way to solve a business problem, not how the technology works. Technical Gatekeeper : A member of the IT staff who evaluates technical solutions such as Jitterbit. They don\u2019t have the ability to say Yes to a purchase but they do have the ability to say No. Jitterbit Product Terminology Jitterbit Harmony API Integration Platform Jitterbit Harmony is Jitterbit\u2019s modern, multi-tenant, born-in-the-cloud API integration platform that connects Software as a Service (SaaS), on-premise, cloud, and legacy applications. This platform is known as the Jitterbit Harmony API Integration Platform . The Harmony Portal is the web-based interface where customers access Harmony applications, including API Manager , Citizen Integrator , Data Loader , Management Console , and Studio #zcr99mk3n8ma. The Jitterbit Harmony Portal is accessible at login.jitterbit.com. After logging in, the resulting page with the four app cards is called the Harmony Portal landing page. The Jitterbit Harmony API Integration Platform is powered by Jitterbit iPaaS capabilities and consists of these components: Harmony Agents : Harmony Agents do the work at runtime, such as connecting to various endpoint systems, transforming data, etc. Harmony customers can use two types of agents, Cloud Agents (serverless agents) and Private Agents (formerly Local Agents), which can be grouped together in Agent Groups to provide for high availability (active/active) and load balancing of operations across those agents. Cloud Agents : Cloud Agents are hosted by Jitterbit directly and perform all of their work in an event-driven fashion, thereby obviating the need for any setup, configuration, or management that is traditional with \u201calways on\u201d server systems that sit behind applications. Jitterbit Cloud Agents are serverless agents, completely scalable, and ensure that all tasks are allocated and executed in a secure and reliable manner. Cloud Agents are organized into Cloud Agent Groups A Jitterbit Cloud Agent Group consists of a set of Jitterbit Harmony Agents maintained and managed by Jitterbit. This option allows you to run all of your integrations in the cloud with a scalable, multi-tenant, fault-tolerant clustered Agent Group. Two Cloud Agent Groups are available: Production Cloud Agent Group : This group is available with a version of the Jitterbit Harmony Agent that is fully tested and ready for production. Sandbox Cloud Agent Group : This group is always the next version of the Jitterbit Harmony Agent, to which the Production Cloud Agent Group will next be upgraded. Typically, it is the version of the Private Agent included in the latest Harmony Platform release at time of the Sandbox Cloud Agent Group update. Private Agents (formerly Local Agents) : Private Agentsare available as traditional installation packages for various Linux and Windows flavors, and as a Docker image. They are self-hosted by customers either on-premise (i.e. in a local/private data center) or on private or public cloud of their choice, manage directly by the customer\u2019s own IT team. By using Private Agents, you choose where your integration runtime environment operates amd control which network your data travels and resides in. Private Agents are often used by customers who need applications to reside within their firewall, or for users who perform integrations under strict regulatory compliance that forbids data to either travel outside a given geographical boundary or reside in the cloud. Acceptable term variations include: Jitterbit Harmony Cloud Agent Jitterbit Harmony Private Agent Jitterbit Harmony Docker Private Agent Jitterbit Harmony Linux Private Agent Jitterbit Harmony Windows Private Agent Cloud Agent, Private Agent, Docker Private Agent, Linux Private Agent, Windows Private Agent Selection of the agent types determine the Harmony deployment model. Any integration project, including APIs, can be deployed with these models: Cloud (Serverless, Full Cloud, Multi-Tenant) : On the Jitterbit Harmony cloud, where the system and scale is completely managed by Jitterbit. Private (On-Premise, Local) : Either an on-premise server or in a public/private cloud, where the system is self-hosted and/or self-managed. Hybrid : In a hybrid mode, where selected portions of the system are self-managed and the remainder is fully managed by Jitterbit. Harmony API Gateway : The Harmony API Gateway provides security, throttling, and validation of any and every incoming API that users publish via Jitterbit. A gateway can also be installed locally and managed internally, or the client can choose the Cloud API Gateway to bypass having to host or control the gateway at all. Harmony Backend Services : Harmony Backend Services include a notification engine, remote private agent management, and other backend systems and services. Harmony Design Repository : The Harmony Design Repository is a secure and encrypted, centralized collection of integration metadata (projects). The Design Repository provides full automatic restore capability from the Harmony cloud and ensures all Cloud and Private Agents have the most recent version of relevant projects. Harmony Messaging Services : Harmony Messaging Services facilitate communication among various Harmony components, providing a reliable method for routing, tracking, and integration retry mechanisms across customers, projects, and means of integration. Harmony Transaction Logs : Harmony Transaction Logs provide easy debugging capabilities for troubleshooting purposes. These logs can be stored for a configurable period of time either locally or on the cloud located in your geography. The extent of information stored in the logs is configurable and can be specified on a per-event basis. Harmony Management APIs : Harmony Management APIs are Jitterbit\u2019s APIs that allow access to all of Harmony\u2019s functionality via web service calls. Any aspect of the Harmony API Integration Platform can be accessed as an API. Developers can leverage these APIs to complete many of the tasks that are typically accomplished via the Design Studio or Management Console, for example exporting Jitterbit logs to a third-party service. Harmony Management APIs are also referred to as Jitterbit Microservices. Harmony region : Jitterbit uses servers in separate regions for NA (North America) and EMEA (Europe, the Middle East, and Africa/Asia/Australia). The region is tied to a Harmony organization rather than a specific user. This allows a user to be part of multiple organizations in different regions. Related Terms Harmony region : Jitterbit uses servers in separate regions for NA (North America) and EMEA (Europe, the Middle East, and Africa/Asia/Australia). The region is tied to a Harmony organization rather than a specific user. This allows a user to be part of multiple organizations in different regions. Jitterbit Harmony Studio Jitterbit Harmony Design Studio is Jitterbit\u2019s project design platform where you can design, test, and deploy your integration projects. These terms are used in Design Studio: Connectors : Connectors are out-of-the-box Jitterbit products that provide pre-built and reusable connectivity to a specific endpoint, such as Salesforce or NetSuite. Connectors provide a flattened interface to reduce the complexity of interacting directly with an endpoint\u2019s API or data exchange protocols. Connectors are used to take the guesswork out of vendor APIs for faster and easier mapping and integration design. Formula Builder : The Formula Builder is used to enter scripts to enhance and refine your wizard-created data processes. Also see the definition for scripts . Hosted HTTP Endpoints : Hosted HTTP Endpoints are project items that enable operations to be triggered via a URL pointed directly at a particular local server. Hosted HTTP Endpoints are not secured, provide limited visibility and management, do not have built-in load balancing or high availability, and are able to be used only with a Private Agent running the operations. Hosted HTTP Endpoints are deprecated and it is recommended instead to use Jitterbit\u2019s Harmony API Integration Platform. Jitterbit Connect Wizards : Jitterbit Connect Wizards provide a fast, easy route to data transformation through a wizard-based integration tool built directly into Jitterbit. The wizard creates for the user all of the complex, detailed operations and components of a transformation. By stepping through the wizard, users can create an integration project without the need for coding. Jitterbit Connect Salesforce Wizards Jitterbit Connect Standard Wizards Jitterbit Entities : Jitterbit Entities are virtual objects that can be created to describe a structure similar to that of a database table with columns. After the Jitterbit Entity is created, the entity is assigned to the OData API. Jitterpak : A Jitterpak is a single file containing all metadata of a project. Jitterpaks are primarily used for easy local backup/archiving and redistribution of projects. Operations : Operations are project items used to define what your integration should do and when it should be done. There are four core Operation Activity types (Transformation, Script, Archive, and Web Service Call) and a variety of other types (Hosted Web Service, API Entity Operation [OData], XSLT Operation, Connectors). Plugins : Plugins are Jitterbit- or user-provided applications that extend native capabilities of Jitterbit. Plugins can be executed within sources or targets in an operation, or called from within scripts. Jitterbit includes a Plugin SDK to allow customers to wrap any business logic they may have already coded for and not want to reimplement in Jitterbit. Scripts : Scripts, written in the Jitterbit proprietary scripting language (Jitterbit Script) or in JavaScript, provide the flexibility and power to transform data, perform calculations, or perform logic validation beyond simple field mapping. Scripts can be used as steps in an operation or within transformations to apply specified logic or conditions to your data. Source : A source defines properties of the system that Jitterbit connects to and retrieves data from. The system properties vary depending on the type of source you choose. Target : A target defines the properties of the system that Jitterbit needs to connect and post data to. The system properties vary depending on the type of target you choose. Transformation : A transformation refers to the transformation and mapping of data between a source and a target system. Depending on the source and target system selected, the transformation wizard takes the user through a set of steps to define the information required to perform the transformation. Data structures representing both source and target systems are presented in graphical tree structures. Variables : Variables are used to allow for the dynamic configuration of endpoints, to support passing of data between operations, and to enable sophisticated integration logic within transformation scripts. Jitterbit Harmony API Manager Jitterbit Harmony API Manager is Jitterbit\u2019s API management web interface where you can create and publish developer-friendly APIs and perform full API lifecycle management tasks. The general industry term API management, often abbreviated APIM, refers to API management in general. Do not use this acronym to refer to Jitterbit\u2019s API Manager web interface. Always refer to API Manager spelled out fully. Other terms used in API Manager include: API : An Application Programming Interface (API) is a set of objects, instructions, methods, and standards that allows one software application to talk to another via web services. For example, when using mobile apps, an API is used to request information from a web-based software application and return the information back to your device. Jitterbit differentiates by enabling users to expose any system as a secure, managed, real-time web (e.g. REST, SOAP, custom, OData) API that can be called and consumed by any other apps. This helps eliminate siloed technology, processes, and people, and enable seamless collaboration across departments, divisions, and teams. API Analytics/Logs : Jitterbit\u2019s API Manager provides predefined and customizable dashboards and reports for user-/application-based consumption and performance including hits per hour, response times per hour, and status code per hour. APIs to pull this data are also available. API Authentication Profiles : Using Jitterbit\u2019s API Manager, profiles can be set for Anonymous (no username or password required), Basic Authentication (standard login/password and/or key), or OAuth 2.0 using Google as the Identity Provider (requires membership in authorized domains, a Google Client ID, and a Google Client Secret to be validated to access the API at runtime). Additional security settings for rate limiting, logging/auditing, and trusted IP range limiting are also provided within the profile. API Creation : Using Jitterbit\u2019s API Manager, Harmony customers can create Jitterbit APIs leveraging existing integration operations. These Jitterbit APIs are created following REST design practices to provide accessible and consumable APIs for both internal and external developers. Each API is assigned a unique, secure URI/URL and each method (GET, POST, etc.) under it is assigned to a single integration operation. As opposed to the outdated, slow waterfall approach in designing APIs (often confusingly referred to as design-first or design-led APIs), Jitterbit believes in the API creation process, where APIs are created on the fly and can be integrated quickly through agile development process. API Debug Mode : Using Jitterbit\u2019s API Manager, debug mode enables full tracing for every request received via an API URL. When enabled, the system retains complete content of each API request and response for up to 24 hours from the time the API call was received and applies to all of the operations triggered by the API. API Gateway : Jitterbit\u2019s API Gateway receives API requests, passes the requests to the Jitterbit Agent and/or backend application, and then passes the response back to the requesting app as needed. The gateway provides authentication, security, throttling, analytics, and validation of any and every API. Our gateway is capable of leveraging Harmony\u2019s integration and transformation engine with the ability to access virtually any backend software and modify the request/response. There are two gateway options: the Jitterbit Cloud Gateway hosted by Jitterbit (backed by AWS), or your own Jitterbit Private Gateway that is installed locally on hardware behind your firewall. API Governance : API governance includes tracking what APIs are deployed, who is calling what APIs, statistics (about APIs, API consumers, and the Developer Portal), what policies should be applied, API versioning, etc. API Management (APIM) : API management includes the tools to create and publish web APIs, an API gateway to receive/process requests, a developer portal to consume APIs, and full API governance. API management is a general industry term, and its acronym (APIM) should not be used to refer to Jitterbit\u2019s API Manager web interface. API Rate Limit : The licensing associated with Jitterbit\u2019s API Manager enforces an overall maximum number of hits across all APIs under the particular organization (client/customer). A separate API rate limit may also be set at the profile- and/or environment-level, enforcing a maximum number of hits that this particular profile can make against all APIs assigned to the profile during a period of one minute. Profile-level rate limiting can effectively be used as user-based rate limiting. Developer Portal : Within Jitterbit\u2019s API Manager, Developer Portal is labeled as \u201cPortal.\u201d Portal Manager : Within Jitterbit\u2019s API Manager, the Portal Manager provides automatically generated OpenAPI documentation allowing the API developer (API Publisher persona) to manage and publish Custom APIs. Portal : Within Jitterbit\u2019s API Manager, the Portal provides internal and external developers (API Consumer persona) access to discover, learn about, interact with, and consume published APIs from a central portal. The API Manager includes the ability to invite API developers/consumers to the Portal (similar to inviting customers to Harmony EiPaaS). This provides security/access control via standard user roles such as internal developers and external developers (customers, partners, vendors, etc.). Jitterbit API : A Jitterbit API is an API created on the Harmony API Integration Platform. In addition to the common use cases for APIs, a Jitterbit API can also be used as a proxy for apps, mobile devices, and websites. Jitterbit APIs are custom-built, showcasing the flexibility of our platform. That is, you can build a secure API by using the EiPaaS platform to bring together disparate systems (legacy apps, databases, SaaS, and Cloud apps) that meet your specific business goals as well as match whatever structure and standard you require; therefore, the API is custom-made for your specific needs. OpenAPI 2.0 API Documentation : Using the Jitterbit API Manager, the request and response structures for each Custom API are automatically generated and exposed via the OpenAPI 2.0 (formerly known as Swagger) format within the Developer Portal at the time the API is published. Using the Developer Portal, the documentation may be edited or enhanced by the publisher to provide additional information to internal and external API consumers. (Note: The auto-generation of OpenAPI docs is not available for OData services at this time.) OpenAPI Specification : The Jitterbit API Manager includes the ability to auto-document published Custom APIs using OpenAPI 2.0 in the Portal Manager. Formerly known as Swagger, the OpenAPI Spec is a documentation specification for REST APIs. Open Data (OData) Protocol : OData is an open protocol that allows the creation and consumption of REST APIs in a simple and standard way. Jitterbit\u2019s API Manager provides the ability to create an OData 2.0 API by assigning a URL to a Jitterbit Entity operation. Certain types of Jitterbit Entities, such as SAP, support read only (GET). Real-time/Evented vs. Near Real-time : Real-time/evented refers to processing the data/request as it comes in, typically without buffer delays, with a response expected to be received within milliseconds or sometimes microseconds. Near real-time refers to the time delay introduced by automated data processing or network transmission between the request and the response. Jitterbit Harmony Citizen Integrator Jitterbit Harmony Citizen Integrator is Jitterbit\u2019s click-and-run web application for non-technical users to quickly customize and deploy integrations using pre-built recipes. The acronym CI should not be used to reference Citizen Integrator. Always use the full term, Citizen Integrator. Jitterbit differentiates our Citizen Integrator product by offering fully-tested recipes that are certified to work on their respective endpoints, in addition to crowd-sourced models. Our certified recipes are canonical versions that use a common \u201cMaster\u201d object model (such as an Account Master, Contact Master, or Product Master) and all endpoints are mapped to the canonical Master. It is easy to take a partial recipe and plug it into the Master, knowing it will automatically work, which saves over 50% of the time of having to perform an end-to-end transformation and mapping for an endpoint. Citizen Integrator includes these capabilities: An interface for recipe designers to create and deploy recipes for their end-users and customers. True no-code, conversational user experience, which leads end-users through a question-based, step-by-step configuration and deployment of recipes. Hundreds of certified and pre-built recipes for CRM, ERP, Marketing, HCM, Field Service, E-Commerce, and other SaaS apps. Platform tools that allow recipe developers and administrators a wide variety of options for recipe development and OEM capabilities. In addition to supporting direct embedding, all Citizen Integrator features are available via REST web services, which allow customers to create UI experiences within their own offering or portal. Recipe integration with Jitterbit Harmony Design Studio. Any integration can be converted to a new recipe and any recipe can be imported into Design Studio to be used as a base for a new custom integration project. Ability to share recipes with specific users or groups. Other terms used in Citizen Integrator include: Citizen Integrator Persona : See the definition under Jitterbit Integration Personas . Recipe : A recipe is a reusable integration template in Citizen Integrator that provides a step-by-step guided experience for non-technical users to execute an integration. Recipes can also be downloaded as Jitterpaks and imported into Design Studio. Templates : Templates are pre-built mappings and workflows for a specific integration need between endpoints. Templates provide a jump start to the integration project so that you don\u2019t have to build everything from scratch. Templates provide the most common field mappings and use cases that most customers need. Installing the template alone will give you a baseline integration between the two systems, for example to synchronize Contacts between Salesforce and NetSuite. However, many businesses have custom fields and unique needs that might require some customizations after the template is installed. For example, your business might want to synchronize a custom Contact field (Nickname) between NetSuite and Salesforce. Note that Jitterpaks are not implicitly considered to be templates, and templates are not considered to be recipes. Jitterbit Harmony Management Console Jitterbit Harmony Management Console is Jitterbit\u2019s web console where you can manage your integration projects and perform administrative functions related to your organization. The Management Console was formerly known as the Web Management Console (WMC). Do not use the acronym WMC. Always refer to Management Console spelled out fully. The pages within the Management Console include: Activities : This page shows the runtime status of operations and the sequence in which a related operation ran, as well as provides the ability to cancel any operation that has not completed. This is one place where all of the basic runtime logs are accessible. Agents : This section allows you the option to set up Private Agents (formerly known as Local Agents) as on-premise runtime servers that execute your integration operations, further configure them, and group Private Agents together so that the work can be automatically load balanced and to ensure high availability. Agents : This page allows you the option to set up Private Agents as on-premise runtime servers that execute your integration operations. Agent Groups : This page allows you to group Private Agents so that each agent behaves consistently with other agents in the group. Agent Groups provide for high availability and load balancing of integration operations across agents within a group when more one agent in an Agent Group is installed. Customizations : This section allows you to customize your Jitterbit integrations with plugins and client-side SSL certificates. Plugins : This page allows you to add and manage Jitterbit standard plugins or custom plugins. Jitterbit standard plugins are designed to be plug-and-play. Customers that are using their own custom plugins are responsible for the security of the custom plugins. Client Certificates : SSL client certificate are used to authenticate Jitterbit with external resources. This page allows you to manage SSL certificates used when connecting to HTTPS source/targets or web services. Downloads : This page provides access to installation files for Private Agents, Data Loader, Design Studio, and certain Design Studio Connectors that don\u2019t already come prepackaged with the Jitterbit Agent. Environments : This page allows you to set up environments in an organization to define and manage the integration project lifecycle. All integration projects deployed to Harmony are deployed to various environments, which can represent a given state of an integration project. For example, a common project lifecycle configuration might have three environments: development, test, and production. Environments can also be used to virtually encapsulate scope, such as Team A vs. Team B. Notifications : This page allows you to configure native platform notifications specific to your organization that trigger when various events occur. For example, you can configure notifications for when an agent is down, when your Harmony password is about to expire, or when a new Private Agent version is available. Organizations : This page provides the ability to define and manage who can participate in integration projects as well as manage overall organization security (such as password complexity, etc.). Jitterbit Harmony supports the ability for a user to have multiple roles in multiple organizations. Projects : This page provides the ability to manage all of your projects across the various stages of their lifecycle. You can import and delete projects, as well as run operations, create and apply a schedule on an operation, manage project backups, edit project variables, and view deploy history. Jitterbit Harmony Data Loader Jitterbit Harmony Data Loader is a free data migration tool that enables Salesforce administrators to quickly and easily automate the import and export of data between flat files, databases, and Salesforce. Please refer to Jitterbit Harmony Data Loader as the product name going forward; do not use the terms Salesforce Data Loader or Jitterbit Data Loader. Data Loader features include: Connectivity : Flat files (any delimiter), ODBC/JDBC databases (single table), Salesforce (single object) Project Design : Salesforce Wizards for Query, Upsert, Update, Insert, Delete, Bulk Process Data Transformation : Basic functions for data formatting and conditions Administration and Project Management : Management Console with operation history, logging, queues Jitterbit Version 5 Jitterbit Version 5 (v5) is the Jitterbit legacy on-premise integration system and does not use the Jitterbit Harmony API Integration Platform. This version reached end of life in April 2018. Updated Terminologies List Current Terminology Previous Terminology Impact Private Agents Local Agents Video Jitterbit Harmony Private Agent Jitterbit Local Agent Private API Gateway, Harmony Private API Gateway On-Premise API Gateway Jitterbit Harmony Design Studio, Harmony Design Studio Desktop Studio, Jitterbit Studio Management Console Web Management Console (WMC) OpenAPI 2.0 API Documentation Swagger Documentation OpenAPI 2.0 API Specification Swagger Specification Jitterbit Product Terms Jitterbit Messaging Terminology Current Terminology Previous Terminology (if any) Business-to-Business (B2B) Integration Business Process Automation (BPA) Robotic Process Automation (RPA) Business Process Management (BPM) Continuous Integration (CI) Continuous Delivery (or Deployment) (CD) Enterprise Service Bus (ESB) Hub/ ELA Integration Model Internet of Things (IoT) Integration Jitterbit Assurance Jitterbit TAM Service Orchestration Root Cause Analysis (RCA) Rough Order Magnitude (ROM) Jitterbit Integration Personas API Consumer Internal API Consumer External API Consumer API Publisher Citizen Integrator Developer / Technical Business Analyst Jitterbit Harmony API Integration Platform Jitterbit Harmony API Integration Platform Harmony Agents Jitterbit Agent Cloud Agents Private Agents Local Agents Jitterbit Harmony Cloud Agent Jitterbit Harmony Private Agent Jitterbit Local Agent Jitterbit Harmony Docker Private Agent Jitterbit Harmony Linux Private Agent Jitterbit Harmony Windows Private Agent Docker Private Agent Linux Private Agent Windows Private Agent Harmony API Gateway Private API Gateway, Harmony Private API Gateway On-Premise API Gateway Harmony Backend Services Harmony Design Repository Harmony Messaging Services Harmony Management APIs Harmony Region Jitterbit Harmony Design Studio Jitterbit Harmony Design Studio Desktop Studio, Jitterbit Studio Jitterbit Studio Jitterbit Harmony API Manager Jitterbit API Manager, API Manager API Creation API Debug Mode API Gateway API Governance API Management (APIM) API Rate Limit Developer Portal Portal Manager Portal Jitterbit API OpenAPI 2.0 API Documentation Swagger Documentation OpenAPI Specification Swagger Specification Open Data (OData) Protocol Real-time/Evented vs. Near Real-time Jitterbit Harmony Citizen Integrator Jitterbit Harmony Citizen Integrator Citizen Integrator Persona Jitterbit Harmony Management Console Management Console Web Management Console (WMC) Jitterbit Harmony Data Loader Current Terminology Previous Terminology (if any) Jitterbit Harmony Data Loader Salesforce Data Loader, Cloud Data Loader Jitterbit Version 5 Jitterbit Version 5 V5, Version 5.0, 5.0, etc. Jitterbit Seasons Jitterbit doesn't follow a calendar year for releases. Instead, us dates seasons as follows Season Dates Example Spring current year From March 1 to May 31 Spring 2020 Summer current year From June 1 to August 31 Summer 2020 Fall current year From September 1 to November 30 Fall 2019 Winter current year From December 1 to February 28/29 Winter 2019","title":"Jitterbit Terminology Glossary"},{"location":"glossary/#jitterbit-terminology-glossary","text":"Note : This topic is for use by the Sales, Marketing, Alliances, and CSM teams. Do not distribute externally.","title":"Jitterbit Terminology Glossary"},{"location":"glossary/#jitterbit-messaging-terminology","text":"Business-to-Business (B2B) Integration : B2B integration refers to the integration, automation, and optimization of business processes that extend outside an organization. Jitterbit connects businesses in industries such as Healthcare, Finance, and Retail by supporting more than 5,000 document standards and 25,000 transaction sets, EDI formats (e.g. X12, EDIFACT, TRADACOMS, XML, CICA, HL7, FHIR), industry-specific formats, and formats with extremely complex file schemas. See customer examples including Matouk and Bounce Energy . Jitterbit also supports modern B2B integration scenarios involving partner enablement through a Hub/ELA Integration Model. Business Process Automation (BPA) / Robotic Process Automation (RPA) : Many customers use the Jitterbit Harmony API Integration Platform to automate their business processes by using iPaaS to trigger actions, tasks, and alerts based on data. Some of them (including Salesforce and Intelliflo) refer to this as Robotic Process Automation (RPA). Customers can loosely couple and re-use these services within the Jitterbit Harmony Design Studio to orchestrate business process flows as needed. A good example of this is Salesforce, which uses Jitterbit to automate more than 3,500 internal orchestrations across departments such as Revenue Operations, M&A, and IT. Business Process Management (BPM) : BPM is the discipline of improving a business process from end to end through analysis, improvement, monitoring, and optimization. Jitterbit powers BPM by providing a dedicated tool for backend data flow and integration, enabling a wide range of use cases from automating engineering processes to streamlining approvals and alerts. Jitterbit\u2019s interface is used during the design stage, as well as over time, allowing stakeholders to easily review, refine, and improve processes. Continuous Integration / Continuous Delivery (or Deployment) (CI/CD) : CI/CD is a software development practice that allows for frequent or immediate deployment of new product changes. This practice requires automation across all development cycles, from building to testing, approving, and releasing. Jitterbit not only facilitates integration with third-party CI/CD apps and toolkits (Jenkins, GitHub, etc.), but also has built-in capabilities, such as migration, deployment, and scheduled operation triggers, that enable customers to use this practice seamlessly without the need for additional tools. Connectivity : Connectivity is the ability of a platform to support native communication protocols supported by the targeted endpoints. The Jitterbit Harmony API Integration Platform provides tools to connect, expose, and use your data using almost any format, protocol, and method of communication. Demo : At Jitterbit, a demo is a demonstration of capabilities of the Jitterbit Harmony API Integration Platform with regard to eiPaas and API capabilities germane to a customer\u2019s integration and/or API needs. A demo does not necessarily mean that it was customized with customer requirements. In contrast, see the definition for Proof of Concept (POC) . Endpoints : Endpoints, also known as connections, are systems and applications where data is stored or business logic is located. Jitterbit integrates and synchronizes data between endpoints such as databases, APIs, files, applications, etc. Refer to Endpoint Definitions for the latest on what Jitterbit defines as endpoints. Enterprise Service Bus (ESB) : An ESB is a software architecture used to connect enterprise applications and services so they can communicate with each other. The Jitterbit Harmony API Integration Platform is used as as a full-blown integration broker, handing off, merging, and manipulating information on an as-needed basis. Enterprise License Agreement (ELA) : TO COME Hub Model : A Hub model is a flexible licensing model that supports an enterprise\u2019s complex internal and external integrations with its business partners, using a scalable platform to centrally design, deploy, and manage business data workflows across a variety of integration scenarios. Internet of Things (IoT) Integration : The Jitterbit Harmony API Integration Platform supports IoT for batch transfers as well as real-time communication and queueing, including manual acknowledgement messaging and traffic proxying. Customers can provide an API interface for IoT devices to communicate with backend systems and data repositories, using Harmony's scale and performance for high volumes of concurrent requests from various devices. Jitterbit has demonstrated support for Microsoft Azure IoT Suite (Hub) and Salesforce IoT Cloud (see video with Salesforce at Dreamforce). Jitterbit Assurance : Jitterbit Assurance\u2122 refers to Jitterbit\u2019s promise to provide each customer a tailored journey that maximizes value based on the customer\u2019s desired business outcomes. Jitterbit Assurance reflects Jitterbit\u2019s customer-first culture combined with years of integration experience. At the heart of Jitterbit Assurance is a designated, named Customer Success Manager (CSM) responsible for ensuring the customer achieves their business goals. Each customer journey begins with the CSM and customer codifying a multi-phased \u201cSuccess Plan\u201d that links each step of the customer\u2019s journey to the customer\u2019s business outcomes. Success plans are reviewed regularly with the client and Jitterbit executive leadership and are signed off only when the customer\u2019s business outcomes are met (as opposed to when the solution is configured and deployed). The CSM serves as a key escalation point, fully empowered by Jitterbit leadership to engage in real-time all Jitterbit assets and personnel impacting the client experience including Professional Services, Technical Account Management, Support, Operations, Solutions Engineering, and Jitterbit executive leadership to remove any impediment to customer success. Jitterbit TAM Service : The Jitterbit Technical Account Manager (TAM) service offers white-glove attention and proven integration strategy advice to customers and partners interested in maximizing the value of their Jitterbit solution and becoming masters of digital connections. The Jitterbit TAM works hand in hand with customers and partners C-level executives, directors, and program managers in pursuit of the following: Acquiring a systemic perspective of the customer's or partner's integration landscape and its value and impact to the business. Developing a deep understanding of the customer's or partner's integration strategy and short-term and long-term use cases. Advising the customer or partner on integration strategy and architecture best practices as it pertains to the use of Jitterbit technology. Acting as a technical liaison between the customer or partner and Jitterbit to communicate product roadmap; identify and advocate product features that would most rapidly benefit the customer or partner; and provide technical guidance and project reviews. Orchestration : In Jitterbit, an orchestration is made up of the logical steps performed within an operation chain in support of the integration scenario. Consisting of a set of linked operations, an orchestration is the combination of on-success and on-failure flows, as well as any dynamic flows that are triggered by events or payload data. Plan of Record (POR) : A POR is a Jitterbit internal budgeting document, used to manage leads-to-conversion ratios vs. projected revenue. Proof of Concept (POC) : At Jitterbit, a POC is a proof of capabilities of the Jitterbit Harmony API Integration Platform that allows Jitterbit to prove our capabilities to support a customer\u2019s integration and API needs. Usually, a POC is driven by customer-specific requirements and sometimes executed within the customer\u2019s own infrastructure. Jitterbit\u2019s POC approach is a key differentiator that sets us apart from competitors. Root Cause Analysis (RCA) : A Root Cause Analysis (RCA) is an evaluation of the underlying cause of a problem. At Jitterbit, we post an RCA to our Trust site ( trust.jitterbit.com ) after any potential outages or significant degradation of service to transparently and openly explain to affected customers what happened, why, and the steps we are taking to prevent the problem from recurring. Note that the same Trust site is also used to communicate non-impacting scheduled events, such as regular releases. Rough Order Magnitude (ROM) : A ROM is a document managed by the Jitterbit Sales Engineering (SE) team that provides a high-level scope of the cost of services attached to a prospect\u2019s project. A ROM is an 80/20 approach to scoping and sizing Jitterbit implementations. It lacks the precision of detailed scoping but offers speed and a path to closing a deal quickly. A ROM looks at the factors that most impact the time and effort associated with particular use cases, including these: Application endpoint Batch or near real time One way or bi-directional Data volumes (1,000s, 10,000s, or >500,000) Data quality (high, medium, or low) Objects involved (price book, accounts, contacts)","title":"Jitterbit Messaging Terminology"},{"location":"glossary/#jitterbit-integration-personas","text":"API Consumer : Jitterbit customers' internal and external users who use the Portals within the Jitterbit Harmony API Manager: Internal API Consumer : A Jitterbit direct customer or a user authorized by the Jitterbit customer (e.g., Jitterbit customer employees or contractors). External API Consumer : A third party that is affiliated with the Jitterbit customer (e.g., Jitterbit customer partners, customers, or vendors). API Publisher : Jitterbit customers (developers) who create APIs and publish Portals using the Jitterbit Harmony API Manager. Citizen Integrator : A Citizen Integrator is typically a Line of Business user, such as a Software as a Service (SaaS) or HR Admin within a department who is responsible for orchestrating simple integration projects between endpoints, with the goal of moving or syncing data between applications. These users use Jitterbit Harmony Citizen Integrator to manage recipes. Technical Business Analyst : A Technical Business Analyst is a Jitterbit Harmony Studio user who authors design configurations that leverage integrations and APIs. Their goal is to create integration projects that move information either in batch or in real-time between applications, seamlessly sharing information between departments within their enterprise and with their external partners. Developer : TO COME Integration Architect : An Integration Architect is a person responsible for designing, identifying integration project requirements and working with stakeholders in the implementation of projects/integration initiatives in a timely manner. Further, they are also responsible for monitoring integration operations within an enterprise and enforcing governance, policies. Their goal is to monitor integration operations as well as any of their hosted and managed Jitterbit assets using the Jitterbit Harmony Management Console. Business Decision Maker : A line of business executive who has the budget to purchase Jitterbit. This person is interested in the best way to solve a business problem, not how the technology works. Technical Gatekeeper : A member of the IT staff who evaluates technical solutions such as Jitterbit. They don\u2019t have the ability to say Yes to a purchase but they do have the ability to say No.","title":"Jitterbit Integration Personas"},{"location":"glossary/#jitterbit-product-terminology","text":"","title":"Jitterbit Product Terminology"},{"location":"glossary/#jitterbit-harmony-api-integration-platform","text":"Jitterbit Harmony is Jitterbit\u2019s modern, multi-tenant, born-in-the-cloud API integration platform that connects Software as a Service (SaaS), on-premise, cloud, and legacy applications. This platform is known as the Jitterbit Harmony API Integration Platform . The Harmony Portal is the web-based interface where customers access Harmony applications, including API Manager , Citizen Integrator , Data Loader , Management Console , and Studio #zcr99mk3n8ma. The Jitterbit Harmony Portal is accessible at login.jitterbit.com. After logging in, the resulting page with the four app cards is called the Harmony Portal landing page. The Jitterbit Harmony API Integration Platform is powered by Jitterbit iPaaS capabilities and consists of these components: Harmony Agents : Harmony Agents do the work at runtime, such as connecting to various endpoint systems, transforming data, etc. Harmony customers can use two types of agents, Cloud Agents (serverless agents) and Private Agents (formerly Local Agents), which can be grouped together in Agent Groups to provide for high availability (active/active) and load balancing of operations across those agents. Cloud Agents : Cloud Agents are hosted by Jitterbit directly and perform all of their work in an event-driven fashion, thereby obviating the need for any setup, configuration, or management that is traditional with \u201calways on\u201d server systems that sit behind applications. Jitterbit Cloud Agents are serverless agents, completely scalable, and ensure that all tasks are allocated and executed in a secure and reliable manner. Cloud Agents are organized into Cloud Agent Groups A Jitterbit Cloud Agent Group consists of a set of Jitterbit Harmony Agents maintained and managed by Jitterbit. This option allows you to run all of your integrations in the cloud with a scalable, multi-tenant, fault-tolerant clustered Agent Group. Two Cloud Agent Groups are available: Production Cloud Agent Group : This group is available with a version of the Jitterbit Harmony Agent that is fully tested and ready for production. Sandbox Cloud Agent Group : This group is always the next version of the Jitterbit Harmony Agent, to which the Production Cloud Agent Group will next be upgraded. Typically, it is the version of the Private Agent included in the latest Harmony Platform release at time of the Sandbox Cloud Agent Group update. Private Agents (formerly Local Agents) : Private Agentsare available as traditional installation packages for various Linux and Windows flavors, and as a Docker image. They are self-hosted by customers either on-premise (i.e. in a local/private data center) or on private or public cloud of their choice, manage directly by the customer\u2019s own IT team. By using Private Agents, you choose where your integration runtime environment operates amd control which network your data travels and resides in. Private Agents are often used by customers who need applications to reside within their firewall, or for users who perform integrations under strict regulatory compliance that forbids data to either travel outside a given geographical boundary or reside in the cloud. Acceptable term variations include: Jitterbit Harmony Cloud Agent Jitterbit Harmony Private Agent Jitterbit Harmony Docker Private Agent Jitterbit Harmony Linux Private Agent Jitterbit Harmony Windows Private Agent Cloud Agent, Private Agent, Docker Private Agent, Linux Private Agent, Windows Private Agent Selection of the agent types determine the Harmony deployment model. Any integration project, including APIs, can be deployed with these models: Cloud (Serverless, Full Cloud, Multi-Tenant) : On the Jitterbit Harmony cloud, where the system and scale is completely managed by Jitterbit. Private (On-Premise, Local) : Either an on-premise server or in a public/private cloud, where the system is self-hosted and/or self-managed. Hybrid : In a hybrid mode, where selected portions of the system are self-managed and the remainder is fully managed by Jitterbit. Harmony API Gateway : The Harmony API Gateway provides security, throttling, and validation of any and every incoming API that users publish via Jitterbit. A gateway can also be installed locally and managed internally, or the client can choose the Cloud API Gateway to bypass having to host or control the gateway at all. Harmony Backend Services : Harmony Backend Services include a notification engine, remote private agent management, and other backend systems and services. Harmony Design Repository : The Harmony Design Repository is a secure and encrypted, centralized collection of integration metadata (projects). The Design Repository provides full automatic restore capability from the Harmony cloud and ensures all Cloud and Private Agents have the most recent version of relevant projects. Harmony Messaging Services : Harmony Messaging Services facilitate communication among various Harmony components, providing a reliable method for routing, tracking, and integration retry mechanisms across customers, projects, and means of integration. Harmony Transaction Logs : Harmony Transaction Logs provide easy debugging capabilities for troubleshooting purposes. These logs can be stored for a configurable period of time either locally or on the cloud located in your geography. The extent of information stored in the logs is configurable and can be specified on a per-event basis. Harmony Management APIs : Harmony Management APIs are Jitterbit\u2019s APIs that allow access to all of Harmony\u2019s functionality via web service calls. Any aspect of the Harmony API Integration Platform can be accessed as an API. Developers can leverage these APIs to complete many of the tasks that are typically accomplished via the Design Studio or Management Console, for example exporting Jitterbit logs to a third-party service. Harmony Management APIs are also referred to as Jitterbit Microservices. Harmony region : Jitterbit uses servers in separate regions for NA (North America) and EMEA (Europe, the Middle East, and Africa/Asia/Australia). The region is tied to a Harmony organization rather than a specific user. This allows a user to be part of multiple organizations in different regions.","title":"Jitterbit Harmony API Integration Platform"},{"location":"glossary/#related-terms","text":"Harmony region : Jitterbit uses servers in separate regions for NA (North America) and EMEA (Europe, the Middle East, and Africa/Asia/Australia). The region is tied to a Harmony organization rather than a specific user. This allows a user to be part of multiple organizations in different regions.","title":"Related Terms"},{"location":"glossary/#jitterbit-harmony-studio","text":"Jitterbit Harmony Design Studio is Jitterbit\u2019s project design platform where you can design, test, and deploy your integration projects. These terms are used in Design Studio: Connectors : Connectors are out-of-the-box Jitterbit products that provide pre-built and reusable connectivity to a specific endpoint, such as Salesforce or NetSuite. Connectors provide a flattened interface to reduce the complexity of interacting directly with an endpoint\u2019s API or data exchange protocols. Connectors are used to take the guesswork out of vendor APIs for faster and easier mapping and integration design. Formula Builder : The Formula Builder is used to enter scripts to enhance and refine your wizard-created data processes. Also see the definition for scripts . Hosted HTTP Endpoints : Hosted HTTP Endpoints are project items that enable operations to be triggered via a URL pointed directly at a particular local server. Hosted HTTP Endpoints are not secured, provide limited visibility and management, do not have built-in load balancing or high availability, and are able to be used only with a Private Agent running the operations. Hosted HTTP Endpoints are deprecated and it is recommended instead to use Jitterbit\u2019s Harmony API Integration Platform. Jitterbit Connect Wizards : Jitterbit Connect Wizards provide a fast, easy route to data transformation through a wizard-based integration tool built directly into Jitterbit. The wizard creates for the user all of the complex, detailed operations and components of a transformation. By stepping through the wizard, users can create an integration project without the need for coding. Jitterbit Connect Salesforce Wizards Jitterbit Connect Standard Wizards Jitterbit Entities : Jitterbit Entities are virtual objects that can be created to describe a structure similar to that of a database table with columns. After the Jitterbit Entity is created, the entity is assigned to the OData API. Jitterpak : A Jitterpak is a single file containing all metadata of a project. Jitterpaks are primarily used for easy local backup/archiving and redistribution of projects. Operations : Operations are project items used to define what your integration should do and when it should be done. There are four core Operation Activity types (Transformation, Script, Archive, and Web Service Call) and a variety of other types (Hosted Web Service, API Entity Operation [OData], XSLT Operation, Connectors). Plugins : Plugins are Jitterbit- or user-provided applications that extend native capabilities of Jitterbit. Plugins can be executed within sources or targets in an operation, or called from within scripts. Jitterbit includes a Plugin SDK to allow customers to wrap any business logic they may have already coded for and not want to reimplement in Jitterbit. Scripts : Scripts, written in the Jitterbit proprietary scripting language (Jitterbit Script) or in JavaScript, provide the flexibility and power to transform data, perform calculations, or perform logic validation beyond simple field mapping. Scripts can be used as steps in an operation or within transformations to apply specified logic or conditions to your data. Source : A source defines properties of the system that Jitterbit connects to and retrieves data from. The system properties vary depending on the type of source you choose. Target : A target defines the properties of the system that Jitterbit needs to connect and post data to. The system properties vary depending on the type of target you choose. Transformation : A transformation refers to the transformation and mapping of data between a source and a target system. Depending on the source and target system selected, the transformation wizard takes the user through a set of steps to define the information required to perform the transformation. Data structures representing both source and target systems are presented in graphical tree structures. Variables : Variables are used to allow for the dynamic configuration of endpoints, to support passing of data between operations, and to enable sophisticated integration logic within transformation scripts.","title":"Jitterbit Harmony Studio"},{"location":"glossary/#jitterbit-harmony-api-manager","text":"Jitterbit Harmony API Manager is Jitterbit\u2019s API management web interface where you can create and publish developer-friendly APIs and perform full API lifecycle management tasks. The general industry term API management, often abbreviated APIM, refers to API management in general. Do not use this acronym to refer to Jitterbit\u2019s API Manager web interface. Always refer to API Manager spelled out fully. Other terms used in API Manager include: API : An Application Programming Interface (API) is a set of objects, instructions, methods, and standards that allows one software application to talk to another via web services. For example, when using mobile apps, an API is used to request information from a web-based software application and return the information back to your device. Jitterbit differentiates by enabling users to expose any system as a secure, managed, real-time web (e.g. REST, SOAP, custom, OData) API that can be called and consumed by any other apps. This helps eliminate siloed technology, processes, and people, and enable seamless collaboration across departments, divisions, and teams. API Analytics/Logs : Jitterbit\u2019s API Manager provides predefined and customizable dashboards and reports for user-/application-based consumption and performance including hits per hour, response times per hour, and status code per hour. APIs to pull this data are also available. API Authentication Profiles : Using Jitterbit\u2019s API Manager, profiles can be set for Anonymous (no username or password required), Basic Authentication (standard login/password and/or key), or OAuth 2.0 using Google as the Identity Provider (requires membership in authorized domains, a Google Client ID, and a Google Client Secret to be validated to access the API at runtime). Additional security settings for rate limiting, logging/auditing, and trusted IP range limiting are also provided within the profile. API Creation : Using Jitterbit\u2019s API Manager, Harmony customers can create Jitterbit APIs leveraging existing integration operations. These Jitterbit APIs are created following REST design practices to provide accessible and consumable APIs for both internal and external developers. Each API is assigned a unique, secure URI/URL and each method (GET, POST, etc.) under it is assigned to a single integration operation. As opposed to the outdated, slow waterfall approach in designing APIs (often confusingly referred to as design-first or design-led APIs), Jitterbit believes in the API creation process, where APIs are created on the fly and can be integrated quickly through agile development process. API Debug Mode : Using Jitterbit\u2019s API Manager, debug mode enables full tracing for every request received via an API URL. When enabled, the system retains complete content of each API request and response for up to 24 hours from the time the API call was received and applies to all of the operations triggered by the API. API Gateway : Jitterbit\u2019s API Gateway receives API requests, passes the requests to the Jitterbit Agent and/or backend application, and then passes the response back to the requesting app as needed. The gateway provides authentication, security, throttling, analytics, and validation of any and every API. Our gateway is capable of leveraging Harmony\u2019s integration and transformation engine with the ability to access virtually any backend software and modify the request/response. There are two gateway options: the Jitterbit Cloud Gateway hosted by Jitterbit (backed by AWS), or your own Jitterbit Private Gateway that is installed locally on hardware behind your firewall. API Governance : API governance includes tracking what APIs are deployed, who is calling what APIs, statistics (about APIs, API consumers, and the Developer Portal), what policies should be applied, API versioning, etc. API Management (APIM) : API management includes the tools to create and publish web APIs, an API gateway to receive/process requests, a developer portal to consume APIs, and full API governance. API management is a general industry term, and its acronym (APIM) should not be used to refer to Jitterbit\u2019s API Manager web interface. API Rate Limit : The licensing associated with Jitterbit\u2019s API Manager enforces an overall maximum number of hits across all APIs under the particular organization (client/customer). A separate API rate limit may also be set at the profile- and/or environment-level, enforcing a maximum number of hits that this particular profile can make against all APIs assigned to the profile during a period of one minute. Profile-level rate limiting can effectively be used as user-based rate limiting. Developer Portal : Within Jitterbit\u2019s API Manager, Developer Portal is labeled as \u201cPortal.\u201d Portal Manager : Within Jitterbit\u2019s API Manager, the Portal Manager provides automatically generated OpenAPI documentation allowing the API developer (API Publisher persona) to manage and publish Custom APIs. Portal : Within Jitterbit\u2019s API Manager, the Portal provides internal and external developers (API Consumer persona) access to discover, learn about, interact with, and consume published APIs from a central portal. The API Manager includes the ability to invite API developers/consumers to the Portal (similar to inviting customers to Harmony EiPaaS). This provides security/access control via standard user roles such as internal developers and external developers (customers, partners, vendors, etc.). Jitterbit API : A Jitterbit API is an API created on the Harmony API Integration Platform. In addition to the common use cases for APIs, a Jitterbit API can also be used as a proxy for apps, mobile devices, and websites. Jitterbit APIs are custom-built, showcasing the flexibility of our platform. That is, you can build a secure API by using the EiPaaS platform to bring together disparate systems (legacy apps, databases, SaaS, and Cloud apps) that meet your specific business goals as well as match whatever structure and standard you require; therefore, the API is custom-made for your specific needs. OpenAPI 2.0 API Documentation : Using the Jitterbit API Manager, the request and response structures for each Custom API are automatically generated and exposed via the OpenAPI 2.0 (formerly known as Swagger) format within the Developer Portal at the time the API is published. Using the Developer Portal, the documentation may be edited or enhanced by the publisher to provide additional information to internal and external API consumers. (Note: The auto-generation of OpenAPI docs is not available for OData services at this time.) OpenAPI Specification : The Jitterbit API Manager includes the ability to auto-document published Custom APIs using OpenAPI 2.0 in the Portal Manager. Formerly known as Swagger, the OpenAPI Spec is a documentation specification for REST APIs. Open Data (OData) Protocol : OData is an open protocol that allows the creation and consumption of REST APIs in a simple and standard way. Jitterbit\u2019s API Manager provides the ability to create an OData 2.0 API by assigning a URL to a Jitterbit Entity operation. Certain types of Jitterbit Entities, such as SAP, support read only (GET). Real-time/Evented vs. Near Real-time : Real-time/evented refers to processing the data/request as it comes in, typically without buffer delays, with a response expected to be received within milliseconds or sometimes microseconds. Near real-time refers to the time delay introduced by automated data processing or network transmission between the request and the response.","title":"Jitterbit Harmony API Manager"},{"location":"glossary/#jitterbit-harmony-citizen-integrator","text":"Jitterbit Harmony Citizen Integrator is Jitterbit\u2019s click-and-run web application for non-technical users to quickly customize and deploy integrations using pre-built recipes. The acronym CI should not be used to reference Citizen Integrator. Always use the full term, Citizen Integrator. Jitterbit differentiates our Citizen Integrator product by offering fully-tested recipes that are certified to work on their respective endpoints, in addition to crowd-sourced models. Our certified recipes are canonical versions that use a common \u201cMaster\u201d object model (such as an Account Master, Contact Master, or Product Master) and all endpoints are mapped to the canonical Master. It is easy to take a partial recipe and plug it into the Master, knowing it will automatically work, which saves over 50% of the time of having to perform an end-to-end transformation and mapping for an endpoint. Citizen Integrator includes these capabilities: An interface for recipe designers to create and deploy recipes for their end-users and customers. True no-code, conversational user experience, which leads end-users through a question-based, step-by-step configuration and deployment of recipes. Hundreds of certified and pre-built recipes for CRM, ERP, Marketing, HCM, Field Service, E-Commerce, and other SaaS apps. Platform tools that allow recipe developers and administrators a wide variety of options for recipe development and OEM capabilities. In addition to supporting direct embedding, all Citizen Integrator features are available via REST web services, which allow customers to create UI experiences within their own offering or portal. Recipe integration with Jitterbit Harmony Design Studio. Any integration can be converted to a new recipe and any recipe can be imported into Design Studio to be used as a base for a new custom integration project. Ability to share recipes with specific users or groups. Other terms used in Citizen Integrator include: Citizen Integrator Persona : See the definition under Jitterbit Integration Personas . Recipe : A recipe is a reusable integration template in Citizen Integrator that provides a step-by-step guided experience for non-technical users to execute an integration. Recipes can also be downloaded as Jitterpaks and imported into Design Studio. Templates : Templates are pre-built mappings and workflows for a specific integration need between endpoints. Templates provide a jump start to the integration project so that you don\u2019t have to build everything from scratch. Templates provide the most common field mappings and use cases that most customers need. Installing the template alone will give you a baseline integration between the two systems, for example to synchronize Contacts between Salesforce and NetSuite. However, many businesses have custom fields and unique needs that might require some customizations after the template is installed. For example, your business might want to synchronize a custom Contact field (Nickname) between NetSuite and Salesforce. Note that Jitterpaks are not implicitly considered to be templates, and templates are not considered to be recipes.","title":"Jitterbit Harmony Citizen Integrator"},{"location":"glossary/#jitterbit-harmony-management-console","text":"Jitterbit Harmony Management Console is Jitterbit\u2019s web console where you can manage your integration projects and perform administrative functions related to your organization. The Management Console was formerly known as the Web Management Console (WMC). Do not use the acronym WMC. Always refer to Management Console spelled out fully. The pages within the Management Console include: Activities : This page shows the runtime status of operations and the sequence in which a related operation ran, as well as provides the ability to cancel any operation that has not completed. This is one place where all of the basic runtime logs are accessible. Agents : This section allows you the option to set up Private Agents (formerly known as Local Agents) as on-premise runtime servers that execute your integration operations, further configure them, and group Private Agents together so that the work can be automatically load balanced and to ensure high availability. Agents : This page allows you the option to set up Private Agents as on-premise runtime servers that execute your integration operations. Agent Groups : This page allows you to group Private Agents so that each agent behaves consistently with other agents in the group. Agent Groups provide for high availability and load balancing of integration operations across agents within a group when more one agent in an Agent Group is installed. Customizations : This section allows you to customize your Jitterbit integrations with plugins and client-side SSL certificates. Plugins : This page allows you to add and manage Jitterbit standard plugins or custom plugins. Jitterbit standard plugins are designed to be plug-and-play. Customers that are using their own custom plugins are responsible for the security of the custom plugins. Client Certificates : SSL client certificate are used to authenticate Jitterbit with external resources. This page allows you to manage SSL certificates used when connecting to HTTPS source/targets or web services. Downloads : This page provides access to installation files for Private Agents, Data Loader, Design Studio, and certain Design Studio Connectors that don\u2019t already come prepackaged with the Jitterbit Agent. Environments : This page allows you to set up environments in an organization to define and manage the integration project lifecycle. All integration projects deployed to Harmony are deployed to various environments, which can represent a given state of an integration project. For example, a common project lifecycle configuration might have three environments: development, test, and production. Environments can also be used to virtually encapsulate scope, such as Team A vs. Team B. Notifications : This page allows you to configure native platform notifications specific to your organization that trigger when various events occur. For example, you can configure notifications for when an agent is down, when your Harmony password is about to expire, or when a new Private Agent version is available. Organizations : This page provides the ability to define and manage who can participate in integration projects as well as manage overall organization security (such as password complexity, etc.). Jitterbit Harmony supports the ability for a user to have multiple roles in multiple organizations. Projects : This page provides the ability to manage all of your projects across the various stages of their lifecycle. You can import and delete projects, as well as run operations, create and apply a schedule on an operation, manage project backups, edit project variables, and view deploy history.","title":"Jitterbit Harmony Management Console"},{"location":"glossary/#jitterbit-harmony-data-loader","text":"Jitterbit Harmony Data Loader is a free data migration tool that enables Salesforce administrators to quickly and easily automate the import and export of data between flat files, databases, and Salesforce. Please refer to Jitterbit Harmony Data Loader as the product name going forward; do not use the terms Salesforce Data Loader or Jitterbit Data Loader. Data Loader features include: Connectivity : Flat files (any delimiter), ODBC/JDBC databases (single table), Salesforce (single object) Project Design : Salesforce Wizards for Query, Upsert, Update, Insert, Delete, Bulk Process Data Transformation : Basic functions for data formatting and conditions Administration and Project Management : Management Console with operation history, logging, queues","title":"Jitterbit Harmony Data Loader"},{"location":"glossary/#jitterbit-version-5","text":"Jitterbit Version 5 (v5) is the Jitterbit legacy on-premise integration system and does not use the Jitterbit Harmony API Integration Platform. This version reached end of life in April 2018.","title":"Jitterbit Version 5"},{"location":"glossary/#updated-terminologies-list","text":"Current Terminology Previous Terminology Impact Private Agents Local Agents Video Jitterbit Harmony Private Agent Jitterbit Local Agent Private API Gateway, Harmony Private API Gateway On-Premise API Gateway Jitterbit Harmony Design Studio, Harmony Design Studio Desktop Studio, Jitterbit Studio Management Console Web Management Console (WMC) OpenAPI 2.0 API Documentation Swagger Documentation OpenAPI 2.0 API Specification Swagger Specification","title":"Updated Terminologies List"},{"location":"glossary/#jitterbit-product-terms","text":"","title":"Jitterbit Product Terms"},{"location":"glossary/#jitterbit-messaging-terminology_1","text":"Current Terminology Previous Terminology (if any) Business-to-Business (B2B) Integration Business Process Automation (BPA) Robotic Process Automation (RPA) Business Process Management (BPM) Continuous Integration (CI) Continuous Delivery (or Deployment) (CD) Enterprise Service Bus (ESB) Hub/ ELA Integration Model Internet of Things (IoT) Integration Jitterbit Assurance Jitterbit TAM Service Orchestration Root Cause Analysis (RCA) Rough Order Magnitude (ROM) Jitterbit Integration Personas API Consumer Internal API Consumer External API Consumer API Publisher Citizen Integrator Developer / Technical Business Analyst Jitterbit Harmony API Integration Platform Jitterbit Harmony API Integration Platform Harmony Agents Jitterbit Agent Cloud Agents Private Agents Local Agents Jitterbit Harmony Cloud Agent Jitterbit Harmony Private Agent Jitterbit Local Agent Jitterbit Harmony Docker Private Agent Jitterbit Harmony Linux Private Agent Jitterbit Harmony Windows Private Agent Docker Private Agent Linux Private Agent Windows Private Agent Harmony API Gateway Private API Gateway, Harmony Private API Gateway On-Premise API Gateway Harmony Backend Services Harmony Design Repository Harmony Messaging Services Harmony Management APIs Harmony Region Jitterbit Harmony Design Studio Jitterbit Harmony Design Studio Desktop Studio, Jitterbit Studio Jitterbit Studio Jitterbit Harmony API Manager Jitterbit API Manager, API Manager API Creation API Debug Mode API Gateway API Governance API Management (APIM) API Rate Limit Developer Portal Portal Manager Portal Jitterbit API OpenAPI 2.0 API Documentation Swagger Documentation OpenAPI Specification Swagger Specification Open Data (OData) Protocol Real-time/Evented vs. Near Real-time Jitterbit Harmony Citizen Integrator Jitterbit Harmony Citizen Integrator Citizen Integrator Persona Jitterbit Harmony Management Console Management Console Web Management Console (WMC) Jitterbit Harmony Data Loader Current Terminology Previous Terminology (if any) Jitterbit Harmony Data Loader Salesforce Data Loader, Cloud Data Loader Jitterbit Version 5 Jitterbit Version 5 V5, Version 5.0, 5.0, etc.","title":"Jitterbit Messaging Terminology"},{"location":"glossary/#jitterbit-seasons","text":"Jitterbit doesn't follow a calendar year for releases. Instead, us dates seasons as follows Season Dates Example Spring current year From March 1 to May 31 Spring 2020 Summer current year From June 1 to August 31 Summer 2020 Fall current year From September 1 to November 30 Fall 2019 Winter current year From December 1 to February 28/29 Winter 2019","title":"Jitterbit Seasons"},{"location":"imagebest/","text":"Best Practices: Images We all take pictures of our screen from time to time because it is often the fastest way to show and explain something. Screenshots are essential for almost any documentation as they can be of great help for users providing quick visual solution. You have to think about many things when making screenshots, such as image size, image quality, information privacy, text readability, and more.If you have an interface that might be complex or difficult to understand, images can help the user. A screenshot, a workflow diagram, or a GIF along with text can describe a process and provide conceptual information. However, an image must supplement written content. It shouldn't replace it. Always include additional text to assist users with visual disabilities. For more information on making images accessible, see Write for All Users . When to include an image Consider using an image in the following circumstances: Your UI requires complex interactions in precise order. Your product's interface has many related parts. You need to show complex relationships. There are workflows to compare and contrast.. There are design problems in the UI or workflow. Before you create an image Consider the following before starting: Can you use a table or list instead of a screenshot?. What if the information shown in the image changes in the next release. Is there an existing image you can reuse? After you create an image Use this checklist before publishing: Check your images for accuracy before release. Introduce each image with a sentence that describes its contents. Always include alt-text with an image. See Including alt-text . Other guidelines: Images shouldn't replace an explanation about how to complete a task. If the user can follow the written instructions without a UI screenshot, don't include it. Well-designed UIs don't need screenshots. Never include customer data, Jitterbit data, or Protected Health Information (PHI) in an image.","title":"Best Practices for Images"},{"location":"imagebest/#best-practices-images","text":"We all take pictures of our screen from time to time because it is often the fastest way to show and explain something. Screenshots are essential for almost any documentation as they can be of great help for users providing quick visual solution. You have to think about many things when making screenshots, such as image size, image quality, information privacy, text readability, and more.If you have an interface that might be complex or difficult to understand, images can help the user. A screenshot, a workflow diagram, or a GIF along with text can describe a process and provide conceptual information. However, an image must supplement written content. It shouldn't replace it. Always include additional text to assist users with visual disabilities. For more information on making images accessible, see Write for All Users .","title":"Best Practices: Images"},{"location":"imagebest/#when-to-include-an-image","text":"Consider using an image in the following circumstances: Your UI requires complex interactions in precise order. Your product's interface has many related parts. You need to show complex relationships. There are workflows to compare and contrast.. There are design problems in the UI or workflow.","title":"When to include an image"},{"location":"imagebest/#before-you-create-an-image","text":"Consider the following before starting: Can you use a table or list instead of a screenshot?. What if the information shown in the image changes in the next release. Is there an existing image you can reuse?","title":"Before you create an image"},{"location":"imagebest/#after-you-create-an-image","text":"Use this checklist before publishing: Check your images for accuracy before release. Introduce each image with a sentence that describes its contents. Always include alt-text with an image. See Including alt-text . Other guidelines: Images shouldn't replace an explanation about how to complete a task. If the user can follow the written instructions without a UI screenshot, don't include it. Well-designed UIs don't need screenshots. Never include customer data, Jitterbit data, or Protected Health Information (PHI) in an image.","title":"After you create an image"},{"location":"imagetypes/","text":"Image Types We use these type of images in Jitterbit documentation: Product screenshots Conceptual and workflow diagrams GIFs illustrating a process Inline images or UI elements. Product Screenshots Use screenshots for task information. They're also useful in troubleshooting topics. A good example of a screenshot is at Amozon S3 Connector . Conceptual and Workflow Diagrams Use diagrams show complex system architecture, workflows, Jitterbit processes, and transformation types. While they should never replace text, they are an effective way to help users understand complex material. Validity Patterns in Operation Validity has excellent examples of diagrams and workflows. GIFs Illustrating a Process You can use an animated GIF to show a process, such as creating a Cloud Studio activity. They're and effective way of enhancing a text discription. See the following example of an animated GIF: Inline images We use inline images to show what a UI element, such as an icon, button, or command element. See the following example of an inline image: Click the Refresh icon or the word Refresh to reload objects from the Snowflake endpoint. This may be useful if you have recently added objects to the Snowflake instance. This action refreshes all metadata used to build the table of objects displayed in the configuration.","title":"Image Types"},{"location":"imagetypes/#image-types","text":"We use these type of images in Jitterbit documentation: Product screenshots Conceptual and workflow diagrams GIFs illustrating a process Inline images or UI elements.","title":"Image Types"},{"location":"imagetypes/#product-screenshots","text":"Use screenshots for task information. They're also useful in troubleshooting topics. A good example of a screenshot is at Amozon S3 Connector .","title":"Product Screenshots"},{"location":"imagetypes/#conceptual-and-workflow-diagrams","text":"Use diagrams show complex system architecture, workflows, Jitterbit processes, and transformation types. While they should never replace text, they are an effective way to help users understand complex material. Validity Patterns in Operation Validity has excellent examples of diagrams and workflows.","title":"Conceptual and Workflow Diagrams"},{"location":"imagetypes/#gifs-illustrating-a-process","text":"You can use an animated GIF to show a process, such as creating a Cloud Studio activity. They're and effective way of enhancing a text discription. See the following example of an animated GIF: Inline images We use inline images to show what a UI element, such as an icon, button, or command element. See the following example of an inline image: Click the Refresh icon or the word Refresh to reload objects from the Snowflake endpoint. This may be useful if you have recently added objects to the Snowflake instance. This action refreshes all metadata used to build the table of objects displayed in the configuration.","title":"GIFs Illustrating a Process"},{"location":"jdocs/","text":"About Jitterbit Documents We produce a lot of different documents at Jitterbit. The Jitterbit user documentation set includes step-by-step instructions, conceptual content, enablement information, references, troubleshooting pages, and product tutorials. Every page and every topic must have a clear focus on the user. By providing relevant information that guides a reader, our documents help users become productive and confident when they use our software and services. To support this goal, Jitterbit documentation follows these principles: Focus on the user, not on the product or a feature. Include only the information a user needs to accomplish their goal. Write in direct, plain language. Include clear, complete, and rich examples that help users understand complicated concepts or complex procedures. Jitterbit Documents Are User-focused Readers look for content that applies to their situation, so Jitterbit documents avoid describing what the product or UI does and instead focus on what the user can do . Apply the following guidelines to help keep Jitterbit documents user-focused: Consider assumptions about the audience's knowledge level. Write documentation at the level of understanding the user has, but don't assume that terms and concepts are commonplace. Construct sentences that explain what the user can do with the product, not what the product lets the user do . Consider the user's reason for using the documentation and focus the documentation on their goal rather than detailing every aspect of what engineering built. Jitterbit Documents Are Goal-oriented As proud and excited as we are about the capabilities of Jitterbit, readers are more interested in achieving a goal. We show a user how to complete goals and solve real-world problems. Apply the following guidelines to help keep Jitterbit documents goal-oriented: Identify the audience and know their needs before planning content. Describe prerequisites and background or other information about the feature that a user needs to achieve their goal. Include just the information that offers value to the user in achieving what they set out to do. Link thoughtfully to supporting material or additional information. Jitterbit Documents Are Straightforward Users don't read documentation from start to finish. They look for titles and keywords matching their problem or question. They scan content for information or examples. Jitterbit documentation has descriptive titles and tasks written in straightforward, plain language. Apply the following guidelines to help keep our documentation straightforward: Title your topics and section headings so that users can find the information they need. Write directly to the user and in plain language. Avoid unnecessary technical language. Don't use jargon. Remember that people all around the world read and depend on our documents. Their experience with English varies. For more information about writing in Jitterbit tone, see Tone . For help on topic titles, see Document Names, Topic Titles, and Section Headings . Jitterbit Documents Are Rich in Examples Users look for examples that illustrate new concepts or complex procedures. Look for use cases and examples provided by Engineering and Product.","title":"A Word about Jitterbit Docs"},{"location":"jdocs/#about-jitterbit-documents","text":"We produce a lot of different documents at Jitterbit. The Jitterbit user documentation set includes step-by-step instructions, conceptual content, enablement information, references, troubleshooting pages, and product tutorials. Every page and every topic must have a clear focus on the user. By providing relevant information that guides a reader, our documents help users become productive and confident when they use our software and services. To support this goal, Jitterbit documentation follows these principles: Focus on the user, not on the product or a feature. Include only the information a user needs to accomplish their goal. Write in direct, plain language. Include clear, complete, and rich examples that help users understand complicated concepts or complex procedures.","title":"About Jitterbit Documents"},{"location":"jdocs/#jitterbit-documents-are-user-focused","text":"Readers look for content that applies to their situation, so Jitterbit documents avoid describing what the product or UI does and instead focus on what the user can do . Apply the following guidelines to help keep Jitterbit documents user-focused: Consider assumptions about the audience's knowledge level. Write documentation at the level of understanding the user has, but don't assume that terms and concepts are commonplace. Construct sentences that explain what the user can do with the product, not what the product lets the user do . Consider the user's reason for using the documentation and focus the documentation on their goal rather than detailing every aspect of what engineering built.","title":"Jitterbit Documents Are User-focused"},{"location":"jdocs/#jitterbit-documents-are-goal-oriented","text":"As proud and excited as we are about the capabilities of Jitterbit, readers are more interested in achieving a goal. We show a user how to complete goals and solve real-world problems. Apply the following guidelines to help keep Jitterbit documents goal-oriented: Identify the audience and know their needs before planning content. Describe prerequisites and background or other information about the feature that a user needs to achieve their goal. Include just the information that offers value to the user in achieving what they set out to do. Link thoughtfully to supporting material or additional information.","title":"Jitterbit Documents Are Goal-oriented"},{"location":"jdocs/#jitterbit-documents-are-straightforward","text":"Users don't read documentation from start to finish. They look for titles and keywords matching their problem or question. They scan content for information or examples. Jitterbit documentation has descriptive titles and tasks written in straightforward, plain language. Apply the following guidelines to help keep our documentation straightforward: Title your topics and section headings so that users can find the information they need. Write directly to the user and in plain language. Avoid unnecessary technical language. Don't use jargon. Remember that people all around the world read and depend on our documents. Their experience with English varies. For more information about writing in Jitterbit tone, see Tone . For help on topic titles, see Document Names, Topic Titles, and Section Headings .","title":"Jitterbit Documents Are Straightforward"},{"location":"jdocs/#jitterbit-documents-are-rich-in-examples","text":"Users look for examples that illustrate new concepts or complex procedures. Look for use cases and examples provided by Engineering and Product.","title":"Jitterbit Documents Are Rich in Examples"},{"location":"linksbp/","text":"Best Practices: Links Links are used as cross-references and guide the user through our documentation and web sites. Good links give the user quick access to relevant related material but don't take the focus away. Remember that users often don't read sequentially. Don't expect users to read topics sequentially or use the sidebar for navigation. If a link to a related topic adds value, use it. Before adding links into your content, consider these best practices: Never add links to headings or the first paragraph of a topic. Critical information belongs in the topic. Don't make the user navigate away to read it. Weigh the costs and benefits of the user navigating away to read the linked topics. Always give context and let the reader device whether to click or stay in the topic. Open links in a new tab.","title":"Best Practices for Links"},{"location":"linksbp/#best-practices-links","text":"Links are used as cross-references and guide the user through our documentation and web sites. Good links give the user quick access to relevant related material but don't take the focus away. Remember that users often don't read sequentially. Don't expect users to read topics sequentially or use the sidebar for navigation. If a link to a related topic adds value, use it. Before adding links into your content, consider these best practices: Never add links to headings or the first paragraph of a topic. Critical information belongs in the topic. Don't make the user navigate away to read it. Weigh the costs and benefits of the user navigating away to read the linked topics. Always give context and let the reader device whether to click or stay in the topic. Open links in a new tab.","title":"Best Practices: Links"},{"location":"listsbp/","text":"Best Practices for Lists Users look for lists because lists organize information in a compact, scannable format. These tips will help you with creating and using lists in your documents: Always introduce a list with a complete lead-in sentence. Create lists with more than a single item Limit lists to two levels. Create the second level lists with more than one item. Capitalize the first letter of item. Use terminal punctuation if the list item is a complete sentence. If you punctuate one item, punctuate all of them, even those that are not complete sentences. Use parallel sentence construction. Start all lists items with verbs. Avoid including links in a procedure list. See List Types for more on bulleted lists and numbered lists.","title":"Best Practices for Lists"},{"location":"listsbp/#best-practices-for-lists","text":"Users look for lists because lists organize information in a compact, scannable format. These tips will help you with creating and using lists in your documents: Always introduce a list with a complete lead-in sentence. Create lists with more than a single item Limit lists to two levels. Create the second level lists with more than one item. Capitalize the first letter of item. Use terminal punctuation if the list item is a complete sentence. If you punctuate one item, punctuate all of them, even those that are not complete sentences. Use parallel sentence construction. Start all lists items with verbs. Avoid including links in a procedure list. See List Types for more on bulleted lists and numbered lists.","title":"Best Practices for Lists"},{"location":"mono/","text":"Monospaced Text Don't use monospaced text in headings or subheadings. Monospaced Text Guidelines Format the following elements as inline monospaced font: Command line arguments in a paragraph Configuration file parameters and arguments Expressions File paths Variables Short code samples less than a line Format the following in monospaced type as a block: Code samples that cross limes Command line arguments in a numbered list or longer than one line Configuration file text API requests and responses","title":"Monospaced Text"},{"location":"mono/#monospaced-text","text":"Don't use monospaced text in headings or subheadings.","title":"Monospaced Text"},{"location":"mono/#monospaced-text-guidelines","text":"Format the following elements as inline monospaced font: Command line arguments in a paragraph Configuration file parameters and arguments Expressions File paths Variables Short code samples less than a line Format the following in monospaced type as a block: Code samples that cross limes Command line arguments in a numbered list or longer than one line Configuration file text API requests and responses","title":"Monospaced Text Guidelines"},{"location":"notetipcautionwarning/","text":"Notes, Tips, Cautions, and Warnings Use Notes, Tips, Cautions, and Warnings to highlight information on a page by surrounding text with a colored box. Guidelines for using these features Here are guidelines to consider: * * Make them short and succinct. * Place Notes, and Tips after the text. * Place Cautions and Warnings before the text. * Notes should not be used for prerequisites. * Don't use a Note, Tip, Caution, or Warning immediately after a topic title or section heading. Notes Tips Cautions Warnings","title":"Notes, Tips, Cautions, and Warnings"},{"location":"notetipcautionwarning/#notes-tips-cautions-and-warnings","text":"Use Notes, Tips, Cautions, and Warnings to highlight information on a page by surrounding text with a colored box.","title":"Notes, Tips, Cautions, and Warnings"},{"location":"notetipcautionwarning/#guidelines-for-using-these-features","text":"Here are guidelines to consider: * * Make them short and succinct. * Place Notes, and Tips after the text. * Place Cautions and Warnings before the text. * Notes should not be used for prerequisites. * Don't use a Note, Tip, Caution, or Warning immediately after a topic title or section heading.","title":"Guidelines for using these features"},{"location":"notetipcautionwarning/#notes","text":"","title":"Notes"},{"location":"notetipcautionwarning/#tips","text":"","title":"Tips"},{"location":"notetipcautionwarning/#cautions","text":"","title":"Cautions"},{"location":"notetipcautionwarning/#warnings","text":"","title":"Warnings"},{"location":"numorword/","text":"Numerals or Words? When writing about numbers that appear in a UI, always duplicate them exactly as the UI displays. That's what the user is looking for in the documentation. Spell out numbers from zero to nine, but use the numeral if the number is 10 or greater. Use a comma in a number that has four or more digits except for years or in code. Here are some examples: Because our servers are distibuted, we offer zero downtime. This Cloud Studio project has 10 separate workflows. The maximum size for the data file is 10,204 GB. The NA release is planned for March 10, 2020. Be Consistent If you use a single-digit number in a sentence with another number that is 10 or greater, then use numerals for all numbers in that sentence. For example: From the 14 results, select 5 to use in the activity. The CPU activity will be between 5% and 20%. We recomment a 4-core CPU with 16 MB memory. Never Start a Sentence with a Numeral Rewrite the sentence so the number is prefaced by a modifier or appears later later in the sentence. If rewriting is impossible, then spell out the number at the beginning of the sentence. Five Tips for Using Variables. Here are 5 tips for using variables.","title":"Numerals or Words?"},{"location":"numorword/#numerals-or-words","text":"When writing about numbers that appear in a UI, always duplicate them exactly as the UI displays. That's what the user is looking for in the documentation. Spell out numbers from zero to nine, but use the numeral if the number is 10 or greater. Use a comma in a number that has four or more digits except for years or in code. Here are some examples: Because our servers are distibuted, we offer zero downtime. This Cloud Studio project has 10 separate workflows. The maximum size for the data file is 10,204 GB. The NA release is planned for March 10, 2020.","title":"Numerals or Words?"},{"location":"numorword/#be-consistent","text":"If you use a single-digit number in a sentence with another number that is 10 or greater, then use numerals for all numbers in that sentence. For example: From the 14 results, select 5 to use in the activity. The CPU activity will be between 5% and 20%. We recomment a 4-core CPU with 16 MB memory.","title":"Be Consistent"},{"location":"numorword/#never-start-a-sentence-with-a-numeral","text":"Rewrite the sentence so the number is prefaced by a modifier or appears later later in the sentence. If rewriting is impossible, then spell out the number at the beginning of the sentence. Five Tips for Using Variables. Here are 5 tips for using variables.","title":"Never Start a Sentence with a Numeral"},{"location":"othersources/","text":"Other Sources","title":"Other Sources"},{"location":"othersources/#other-sources","text":"","title":"Other Sources"},{"location":"parens/","text":"Parentheses","title":"Parentheses"},{"location":"parens/#parentheses","text":"","title":"Parentheses"},{"location":"percent/","text":"Percent Use numerals followed by the percent sign (%). Don't use the word percent unless part of the UI.","title":"Percent"},{"location":"percent/#percent","text":"Use numerals followed by the percent sign (%). Don't use the word percent unless part of the UI.","title":"Percent"},{"location":"plainlanguage/","text":"Use Plain Language Using plain language helps the widest variety of users understand what you write. Remember that Jitterbit serves aglobal audience whose first language might not be English. Plain language makes translation easier and makes documentation more accessible. Using plain language increases the chance that readers understand what you wrote the first time they read it. For more guidance on how using plain language increases accessibility, see Write for Everyone . Here are some tips for using plain language in your writing: Avoid obscure words. If you use technical terms or jargon, explain it. Use simple sentences. Shorter sentences are easier to understand. Try to have only one idea or concept per sentence. Avoid abbreviations. See Abbreviations for more information. Be consistent. Use the same term to mean the same thing in one topic as you do in another topic.' Use standard Jitterbit terms. Don't use recipe if you mean template , for example. Avoid jargon and complex terminology Jargon and complex terminology are terms that are specific to a company, software, or service. Technical language can confuse and frustrate users, so avoid them whenever possible. If you have to use complex or unfamiliar Jitterbit-specific terminology, explain it. Don't expect the user to know and don't make them search for it. Here are some examples of plain language: Jargon Do a Snowflake GET. Use Jitterbit's out-of-the-box settings.|Use the default settings. You can deploy Private Agents on-prem.|You can deploy a Private Agent on-premises. Plain Language Use a Snowflake GET activity. Use the default settings. You can deploy a Private Agent on-premises. Use these tips to help you avoid jargon in your writing: * Keep in mind your audience's level of knowledge. * Consider if the user needs to know the term to understand the documentation. * Refer to the Avoid Complex Words for examples of words and phrases that are unnecessarily complex and their alternatives.","title":"Use Plain Language"},{"location":"plainlanguage/#use-plain-language","text":"Using plain language helps the widest variety of users understand what you write. Remember that Jitterbit serves aglobal audience whose first language might not be English. Plain language makes translation easier and makes documentation more accessible. Using plain language increases the chance that readers understand what you wrote the first time they read it. For more guidance on how using plain language increases accessibility, see Write for Everyone . Here are some tips for using plain language in your writing: Avoid obscure words. If you use technical terms or jargon, explain it. Use simple sentences. Shorter sentences are easier to understand. Try to have only one idea or concept per sentence. Avoid abbreviations. See Abbreviations for more information. Be consistent. Use the same term to mean the same thing in one topic as you do in another topic.' Use standard Jitterbit terms. Don't use recipe if you mean template , for example.","title":"Use Plain Language"},{"location":"plainlanguage/#avoid-jargon-and-complex-terminology","text":"Jargon and complex terminology are terms that are specific to a company, software, or service. Technical language can confuse and frustrate users, so avoid them whenever possible. If you have to use complex or unfamiliar Jitterbit-specific terminology, explain it. Don't expect the user to know and don't make them search for it. Here are some examples of plain language:","title":"Avoid jargon and complex terminology"},{"location":"plainlanguage/#jargon","text":"Do a Snowflake GET. Use Jitterbit's out-of-the-box settings.|Use the default settings. You can deploy Private Agents on-prem.|You can deploy a Private Agent on-premises.","title":"Jargon"},{"location":"plainlanguage/#plain-language","text":"Use a Snowflake GET activity. Use the default settings. You can deploy a Private Agent on-premises. Use these tips to help you avoid jargon in your writing: * Keep in mind your audience's level of knowledge. * Consider if the user needs to know the term to understand the documentation. * Refer to the Avoid Complex Words for examples of words and phrases that are unnecessarily complex and their alternatives.","title":"Plain Language"},{"location":"pluralparen/","text":"Plurals in Parentheses Avoid using a lowercase s or es in parentheses \u2013 (s) or (es) \u2013 after a noun to indicate both singular and plural. Choose the best option for your document. In most cases, using the plural works best for understanding the sentence. If it's important to include both singular and plural, trying including the phrase one or more . Correct The activity returns the current customer name. The activity returns the current customer names. The activity returns one or more of the current customer names. The activity returns all of the current customer names. Check the correct boxes. Incorrect The activity returns the current customer name(s). Check the correct box(es). See Parentheses for using parentheses.","title":"Plurals in Parentheses"},{"location":"pluralparen/#plurals-in-parentheses","text":"Avoid using a lowercase s or es in parentheses \u2013 (s) or (es) \u2013 after a noun to indicate both singular and plural. Choose the best option for your document. In most cases, using the plural works best for understanding the sentence. If it's important to include both singular and plural, trying including the phrase one or more .","title":"Plurals in Parentheses"},{"location":"pluralparen/#correct","text":"The activity returns the current customer name. The activity returns the current customer names. The activity returns one or more of the current customer names. The activity returns all of the current customer names. Check the correct boxes.","title":"Correct"},{"location":"pluralparen/#incorrect","text":"The activity returns the current customer name(s). Check the correct box(es). See Parentheses for using parentheses.","title":"Incorrect"},{"location":"possessives/","text":"Possessives Don't use an apostrophe to make product names, company names, or trademarked terms possessive. This is especially critical with trademarked terms as a trademark is an adjective to a product. Adjectives can't be made into possessives. Correct: The log file contains data recorded from the API Gateway log files. Ask your questions and get assistance using the Jitterbit Community portal. Cloud Studio has improved features. Incorrect: The log file contains data recorded from the API Gateway's log files. Ask your question and get assistance using Jitterbit's Community portal. Cloud Studio's features are improved.","title":"Possessives"},{"location":"possessives/#possessives","text":"Don't use an apostrophe to make product names, company names, or trademarked terms possessive. This is especially critical with trademarked terms as a trademark is an adjective to a product. Adjectives can't be made into possessives. Correct: The log file contains data recorded from the API Gateway log files. Ask your questions and get assistance using the Jitterbit Community portal. Cloud Studio has improved features. Incorrect: The log file contains data recorded from the API Gateway's log files. Ask your question and get assistance using Jitterbit's Community portal. Cloud Studio's features are improved.","title":"Possessives"},{"location":"present/","text":"Present Tense In technical writing, present tense is easier to read and understand than past or future tense. It lets the user experience the procedure or learning while reading it. Minimize past and future tense in your writing. Simple verbs are easier to understand than complex verbs, such as those in the progressive or perfect tense. Especially for procedures, think of the user as they follow the steps. They're in the moment. Use these: Click Open . Data Loader displays the file contents. Cloud Studio warns you of errors as you work. As you work, Cloud Studio warns you of potential errors. Instead of these: Click the Open icon. Data Loader opens the file contents. While working, Cloud Studio will warn you if you have made an error. When you click Submit , Cloud Studio will validate and save your work before continuing.","title":"Present Tense"},{"location":"present/#present-tense","text":"In technical writing, present tense is easier to read and understand than past or future tense. It lets the user experience the procedure or learning while reading it. Minimize past and future tense in your writing. Simple verbs are easier to understand than complex verbs, such as those in the progressive or perfect tense. Especially for procedures, think of the user as they follow the steps. They're in the moment. Use these: Click Open . Data Loader displays the file contents. Cloud Studio warns you of errors as you work. As you work, Cloud Studio warns you of potential errors. Instead of these: Click the Open icon. Data Loader opens the file contents. While working, Cloud Studio will warn you if you have made an error. When you click Submit , Cloud Studio will validate and save your work before continuing.","title":"Present Tense"},{"location":"pronouns/","text":"Pronouns Pronouns replace nouns. When you use pronouns in your writing, make sure that the pronoun correctly refers to the noun it replaces. Gender-neutral pronouns Be inclusive and don't make assumptions about sex or gender. When you write Jitterbit documentation, avoid using gender-specific and sexist language. Most of the topics in our documentation use the second-person singular pronoun, you and your , to address a single user directly. If you have to write in the third person or refer to someone in the third person, make sure that you choose gender-neutral third-person pronouns, such as they , their , and them . It's acceptable to use a plural pronoun with a singular antecedent when you refer to people. Use third-person-plural pronouns when you refer to a person of unspecified gender. Don't write him or her or his or hers . Personal pronouns Use the second-person pronoun, you . Avoid first-person pronouns, such as I , our , us , and we . They're acceptable when you respond directly to a user in email or another response. Relative pronouns That and which don't mean the same thing, so don't use them interchangeably. In a sentence, that introduces an essential clause. If you remove that and the clause that follows, the sentence doesn't make sense. Correct: For the directory, provide the path that you want Design Studio to use as a working directory. Which introduces a nonessential clause. If you remove which and the clause that follows, the sentence still makes sense, although it is less detailed. Correct: Cloud Studio uses the jitterbit.conf file, which is essential for proper operation. When referring to a person, use who instead of that . Vague pronouns Avoid ambiguous references between a pronoun and its antecedent. Vague pronouns include this , that , which , and it . Replace the vague pronoun with a noun to assure clarity. Correct: Set WritetoFile to true. Incorrect: Set it to true.","title":"Pronouns"},{"location":"pronouns/#pronouns","text":"Pronouns replace nouns. When you use pronouns in your writing, make sure that the pronoun correctly refers to the noun it replaces.","title":"Pronouns"},{"location":"pronouns/#gender-neutral-pronouns","text":"Be inclusive and don't make assumptions about sex or gender. When you write Jitterbit documentation, avoid using gender-specific and sexist language. Most of the topics in our documentation use the second-person singular pronoun, you and your , to address a single user directly. If you have to write in the third person or refer to someone in the third person, make sure that you choose gender-neutral third-person pronouns, such as they , their , and them . It's acceptable to use a plural pronoun with a singular antecedent when you refer to people. Use third-person-plural pronouns when you refer to a person of unspecified gender. Don't write him or her or his or hers .","title":"Gender-neutral pronouns"},{"location":"pronouns/#personal-pronouns","text":"Use the second-person pronoun, you . Avoid first-person pronouns, such as I , our , us , and we . They're acceptable when you respond directly to a user in email or another response.","title":"Personal pronouns"},{"location":"pronouns/#relative-pronouns","text":"That and which don't mean the same thing, so don't use them interchangeably. In a sentence, that introduces an essential clause. If you remove that and the clause that follows, the sentence doesn't make sense. Correct: For the directory, provide the path that you want Design Studio to use as a working directory. Which introduces a nonessential clause. If you remove which and the clause that follows, the sentence still makes sense, although it is less detailed. Correct: Cloud Studio uses the jitterbit.conf file, which is essential for proper operation. When referring to a person, use who instead of that .","title":"Relative pronouns"},{"location":"pronouns/#vague-pronouns","text":"Avoid ambiguous references between a pronoun and its antecedent. Vague pronouns include this , that , which , and it . Replace the vague pronoun with a noun to assure clarity. Correct: Set WritetoFile to true. Incorrect: Set it to true.","title":"Vague pronouns"},{"location":"second/","text":"Second Person Our documentation often asks the reader to do something or take some action. Use the second person singular whenever you can. You can import a JSON file and edit its settings. Find out how you can speed up your work with Data Loader. If you create content for multiple users address the primary user as you and refer to the other users by their role or titles. As an Administrator, you can adjust the settings for Team Members in your Admin panel.","title":"Second Person"},{"location":"second/#second-person","text":"Our documentation often asks the reader to do something or take some action. Use the second person singular whenever you can. You can import a JSON file and edit its settings. Find out how you can speed up your work with Data Loader. If you create content for multiple users address the primary user as you and refer to the other users by their role or titles. As an Administrator, you can adjust the settings for Team Members in your Admin panel.","title":"Second Person"},{"location":"specialchar/","text":"Special Characters","title":"Special Characters"},{"location":"specialchar/#special-characters","text":"","title":"Special Characters"},{"location":"standard/","text":"Standard English Spelling and Phrases Write in standard English. We use the ??? dictionary, so consult that dictionary if you question your spelling. Avoid Latin and British abbreviations, spelling, and phrases, such as e.g. , colour , and full stop .","title":"Standard English Spelling and Phrases"},{"location":"standard/#standard-english-spelling-and-phrases","text":"Write in standard English. We use the ??? dictionary, so consult that dictionary if you question your spelling. Avoid Latin and British abbreviations, spelling, and phrases, such as e.g. , colour , and full stop .","title":"Standard English Spelling and Phrases"},{"location":"subjunctive/","text":"Subjunctive Mood The subjunctive mood expresses doubt. Jitterbit software either does or doesn't do something. Work to avoid the following subjunctive mood verbs in your writing: should would could Correct: If configured correctly, the Put activity sends data to Amazon S3. The following Success Central pages cover specific Jitterbit products. Use Deploy to immediately deploy your project. Incorrect: If configured correctly, the Put activity should send data to Amazon S3. The following Success Central pages should correspond to specific Jitterbit products. You would use Deploy to immediately deploy your project.","title":"Subjunctive Mood"},{"location":"subjunctive/#subjunctive-mood","text":"The subjunctive mood expresses doubt. Jitterbit software either does or doesn't do something. Work to avoid the following subjunctive mood verbs in your writing: should would could Correct: If configured correctly, the Put activity sends data to Amazon S3. The following Success Central pages cover specific Jitterbit products. Use Deploy to immediately deploy your project. Incorrect: If configured correctly, the Put activity should send data to Amazon S3. The following Success Central pages should correspond to specific Jitterbit products. You would use Deploy to immediately deploy your project.","title":"Subjunctive Mood"},{"location":"tablesbp/","text":"Best Practices for Tables","title":"Best Practices for Tables"},{"location":"tablesbp/#best-practices-for-tables","text":"","title":"Best Practices for Tables"},{"location":"thirdparties/","text":"Documenting Third-party and Partner Products","title":"Documenting Third-party and Partner Products"},{"location":"thirdparties/#documenting-third-party-and-partner-products","text":"","title":"Documenting Third-party and Partner Products"},{"location":"tm/","text":"Trademark Attribution Jitterbit \u00ae is a registered trademark of Jitterbit, Inc. In user documentation, you don't need to include the registration mark in user documentation, as it appears in the page footer. Current Jitterbit Marks","title":"Trademark Attribution"},{"location":"tm/#trademark-attribution","text":"Jitterbit \u00ae is a registered trademark of Jitterbit, Inc. In user documentation, you don't need to include the registration mark in user documentation, as it appears in the page footer.","title":"Trademark Attribution"},{"location":"tm/#current-jitterbit-marks","text":"","title":"Current Jitterbit Marks"},{"location":"tone/","text":"Tone The way most people speak and the way they write is often very different. When we're not technical, we're informal and colloquial. Traditionally, technical writing is formal, dry, and exact. At Jitterbit we strive to balance that is casual and informal, but also direct and approachable. When you create written content, write for the user's needs. Think of the user as a work acquaintance that you are trying shape your docs around your reader's needs and expectations, and write to them as though they are a professional acquaintance. Make your writing confident, friendly, and comprehensive. Here are a few guidelines you can follow to achieve a balanced tone in your writing: Stay away from jargon or idioms. See Use Plain Language . Write in active voice and present tense whenever possible. See Active Voice and Present Tense . Use contractions, such as isn't, don't, and can't. See Contractions . Don't use words or phrases such as \"Simply choose your...\" or \"You can easily change your settings...\". What's simple or easy for one might be a frustrating challenge for another. Tone examples It's sometimes difficult trying not to be too formal or too casual. Here are some examples TK","title":"Tone"},{"location":"tone/#tone","text":"The way most people speak and the way they write is often very different. When we're not technical, we're informal and colloquial. Traditionally, technical writing is formal, dry, and exact. At Jitterbit we strive to balance that is casual and informal, but also direct and approachable. When you create written content, write for the user's needs. Think of the user as a work acquaintance that you are trying shape your docs around your reader's needs and expectations, and write to them as though they are a professional acquaintance. Make your writing confident, friendly, and comprehensive. Here are a few guidelines you can follow to achieve a balanced tone in your writing: Stay away from jargon or idioms. See Use Plain Language . Write in active voice and present tense whenever possible. See Active Voice and Present Tense . Use contractions, such as isn't, don't, and can't. See Contractions . Don't use words or phrases such as \"Simply choose your...\" or \"You can easily change your settings...\". What's simple or easy for one might be a frustrating challenge for another.","title":"Tone"},{"location":"tone/#tone-examples","text":"It's sometimes difficult trying not to be too formal or too casual. Here are some examples TK","title":"Tone examples"},{"location":"uiguidelines/","text":"UI Guidelines","title":"UI Text Style Guidelines"},{"location":"uiguidelines/#ui-guidelines","text":"","title":"UI Guidelines"},{"location":"welcome/","text":"Welcome The Jitterbit Writing Style Guide is the writing style reference for Jitterbit documentation. It is for anyone who creates customer-facing content. Use it when you develop content for Jitterbit documentation or write UI text for a Jitterbit product. The Jitterbit Writing Style Guide gives you usage rules, punctuation guidelines, text formatting guidance, and more: Terms to use and avoid Voice and tone of Jitterbit documents The correct way to link to other Jitterbit documents and sites The correct way to write about third-party documentation Referring to numbers in text What to call elements on Jitterbit web sites Formatting UI text and other elements in documentation It's Only a Guide All guidelines in the Jitterbit Writing Style Guide are just that: guidelines . The goal is to improve Jitterbit documentation by showing you where and why consistency is important across documents and web sites. Of course, there are times where it might make sense to move away from these guidelines to make your documentation better. It's most important that you strive for clear, high-quality documentation than to blindly follow this guide. If you make a decision to not follow our guidance, please send us an email or put a Slack message in the #documentation channel letting us know what you decided and why. We may incorporate your changes into this guide. Who We Are The Jitterbit Writing Style Guide is researched, written, and produced by the Documentation Group here at Jitterbit. We've reached out to other stakeholders here at Jitterbit, including Product, Engineering, Support, and others for input and advice. The Jitterbit Writing Style Guide is always in revision, so check the Latest Changes to the Jitterbit Writing Style Guide for recent updates. For style issues that aren't covered in this guide, see Other Sources . Questions, Comments, or Feedback About the Jitterbit Writing Style Guide If you have questions, comments, or feedback about the Jitterbit Writing Style Guide, use the #documentation Slack channel. You can also send an email to the Docs group .","title":"Welcome to the Jitterbit Style Guide"},{"location":"welcome/#welcome","text":"The Jitterbit Writing Style Guide is the writing style reference for Jitterbit documentation. It is for anyone who creates customer-facing content. Use it when you develop content for Jitterbit documentation or write UI text for a Jitterbit product. The Jitterbit Writing Style Guide gives you usage rules, punctuation guidelines, text formatting guidance, and more: Terms to use and avoid Voice and tone of Jitterbit documents The correct way to link to other Jitterbit documents and sites The correct way to write about third-party documentation Referring to numbers in text What to call elements on Jitterbit web sites Formatting UI text and other elements in documentation","title":"Welcome"},{"location":"welcome/#its-only-a-guide","text":"All guidelines in the Jitterbit Writing Style Guide are just that: guidelines . The goal is to improve Jitterbit documentation by showing you where and why consistency is important across documents and web sites. Of course, there are times where it might make sense to move away from these guidelines to make your documentation better. It's most important that you strive for clear, high-quality documentation than to blindly follow this guide. If you make a decision to not follow our guidance, please send us an email or put a Slack message in the #documentation channel letting us know what you decided and why. We may incorporate your changes into this guide.","title":"It's Only a Guide"},{"location":"welcome/#who-we-are","text":"The Jitterbit Writing Style Guide is researched, written, and produced by the Documentation Group here at Jitterbit. We've reached out to other stakeholders here at Jitterbit, including Product, Engineering, Support, and others for input and advice. The Jitterbit Writing Style Guide is always in revision, so check the Latest Changes to the Jitterbit Writing Style Guide for recent updates. For style issues that aren't covered in this guide, see Other Sources .","title":"Who We Are"},{"location":"welcome/#questions-comments-or-feedback-about-the-jitterbit-writing-style-guide","text":"If you have questions, comments, or feedback about the Jitterbit Writing Style Guide, use the #documentation Slack channel. You can also send an email to the Docs group .","title":"Questions, Comments, or Feedback About the Jitterbit Writing Style Guide"},{"location":"writeproc/","text":"Writing a Procedure Here are some rules of thumb for writing effective procedures. Each action is a numbered step. Results do not take a number as they are not a step. If there is only one step, don't use a bullet or a number. Use active voice. It is easier to understand. Use second person. You're talking to the user, so second person is best. You can even use the word You in your instructions (like I just did). Present tense, please. Most of the time users read the instructions when they're in the middle of trying to do something or solve a problem. Try to write no more than 8 steps. If you require more, break the procedure up into a grouped set of procedures. Include images and videos if they help the user. Use sub-steps sparingly, and use bullets or a, b, c, etc., but be consistent. Don't use Input to show typing information. Use Enter instead. Prerequisites Give the user prerequisites needed to start or complete a procedure. For example, if the user needs a working Salesforce account, tell him. By giving prerequisites, you're setting the user up to succeed. By avoiding frustration, you're building the user's confidence and establishing your authority.","title":"Writing Procedures"},{"location":"writeproc/#writing-a-procedure","text":"Here are some rules of thumb for writing effective procedures. Each action is a numbered step. Results do not take a number as they are not a step. If there is only one step, don't use a bullet or a number. Use active voice. It is easier to understand. Use second person. You're talking to the user, so second person is best. You can even use the word You in your instructions (like I just did). Present tense, please. Most of the time users read the instructions when they're in the middle of trying to do something or solve a problem. Try to write no more than 8 steps. If you require more, break the procedure up into a grouped set of procedures. Include images and videos if they help the user. Use sub-steps sparingly, and use bullets or a, b, c, etc., but be consistent. Don't use Input to show typing information. Use Enter instead.","title":"Writing a Procedure"},{"location":"writeproc/#prerequisites","text":"Give the user prerequisites needed to start or complete a procedure. For example, if the user needs a working Salesforce account, tell him. By giving prerequisites, you're setting the user up to succeed. By avoiding frustration, you're building the user's confidence and establishing your authority.","title":"Prerequisites"}]}